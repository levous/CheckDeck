<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
    <File path="Classes/SCTableViewSection.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTableViewSection</TokenIdentifier>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Abstract>This class functions as a section for SCTableViewModel. Every SCTableViewSection can contain any number of SCTableViewCell(s). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/ownerTableViewModel</TokenIdentifier>
            <Anchor>ownerTableViewModel</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property SCTableViewModel *ownerTableViewModel</Declaration>
            <Abstract>The owner table view model of the section.Important: This property gets set automatically by the section's owner, you should never set this property manually </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/headerTitle</TokenIdentifier>
            <Anchor>headerTitle</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSString *headerTitle</Declaration>
            <Abstract>The section header title. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/headerHeight</TokenIdentifier>
            <Anchor>headerHeight</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property CGFloat headerHeight</Declaration>
            <Abstract>The section header height. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/headerView</TokenIdentifier>
            <Anchor>headerView</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property UIView *headerView</Declaration>
            <Abstract>The section header view. This can be any subclass of UIView (e.g. UILabel or UIImageView). The section automatically adjusts the height of its header to accommodate this view. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/footerTitle</TokenIdentifier>
            <Anchor>footerTitle</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSString *footerTitle</Declaration>
            <Abstract>The section footer title. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/footerHeight</TokenIdentifier>
            <Anchor>footerHeight</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property CGFloat footerHeight</Declaration>
            <Abstract>The section footer height. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/footerView</TokenIdentifier>
            <Anchor>footerView</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property UIView *footerView</Declaration>
            <Abstract>The section footer view. This can be any subclass of UIView (e.g. UILabel or UIImageView). The section automatically adjusts the height of its footer to accommodate this view. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/cellsImageViews</TokenIdentifier>
            <Anchor>cellsImageViews</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSArray *cellsImageViews</Declaration>
            <Abstract>Set this property to an array of UIImageView objects to be set to each of the section's cells. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/cellCount</TokenIdentifier>
            <Anchor>cellCount</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSUInteger cellCount</Declaration>
            <Abstract>The number of cells in the section. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/addCell:</TokenIdentifier>
            <Anchor>addCell:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)addCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Adds a new cell to the section. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/insertCell:atIndex:</TokenIdentifier>
            <Anchor>insertCell:atIndex:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)insertCell:(SCTableViewCell *)cell atIndex:(NSUInteger)index </Declaration>
            <Abstract>Inserts a new cell into the section at the specified index. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/cellAtIndex:</TokenIdentifier>
            <Anchor>cellAtIndex:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (SCTableViewCell *)cellAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Returns the cell at the specified index. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/removeCellAtIndex:</TokenIdentifier>
            <Anchor>removeCellAtIndex:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)removeCellAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Removes the cell at the specified index. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/indexForCell:</TokenIdentifier>
            <Anchor>indexForCell:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (NSUInteger)indexForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Returns the index of the specified cell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/valuesAreValid</TokenIdentifier>
            <Anchor>valuesAreValid</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL valuesAreValid</Declaration>
            <Abstract>This property is TRUE if all the section cells' values are valid, otherwise it's FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/commitCellChangesLive</TokenIdentifier>
            <Anchor>commitCellChangesLive</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL commitCellChangesLive</Declaration>
            <Abstract>Set this property to TRUE for the section cells to commit their values as soon as they are changed. If this value is FALSE, the user must explicitly call commitCellChanges for the cells to commit their value changes. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/commitCellChanges</TokenIdentifier>
            <Anchor>commitCellChanges</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)commitCellChanges</Declaration>
            <Abstract>Commits value changes for all cells in section. This method needs to be called only if the commitCellChangesLive property is FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/reloadBoundValues</TokenIdentifier>
            <Anchor>reloadBoundValues</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)reloadBoundValues</Declaration>
            <Abstract>Reload's the section's bound values in case the associated bound objects or keys valuea has changed by means other than the cells themselves (e.g. external custom code). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/boundObject</TokenIdentifier>
            <Anchor>boundObject</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSObject *boundObject</Declaration>
            <Abstract>Provides subclasses with the framework to bind an SCTableViewSection to an NSObject </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/boundPropertyName</TokenIdentifier>
            <Anchor>boundPropertyName</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSString *boundPropertyName</Declaration>
            <Abstract>Provides subclasses with the framework to bind an SCTableViewSection to an NSObject </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/boundKey</TokenIdentifier>
            <Anchor>boundKey</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSString *boundKey</Declaration>
            <Abstract>Provides subclasses with the framework to bind an SCTableViewSection to a key </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/boundValue</TokenIdentifier>
            <Anchor>boundValue</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSObject *boundValue</Declaration>
            <Abstract>Provides subclasses with the framework to bind an SCTableViewSection to a value </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/section</TokenIdentifier>
            <Anchor>section</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)section</Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewSection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/sectionWithHeaderTitle:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle </Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewSection given a header title.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/sectionWithHeaderTitle:withFooterTitle:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withFooterTitle:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withFooterTitle:(NSString *)sectionFooterTitle </Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewSection given a header and a footer title.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/initWithHeaderTitle:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle </Declaration>
            <Abstract>Returns an initialized SCTableViewSection given a header title.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewSection/initWithHeaderTitle:withFooterTitle:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withFooterTitle:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withFooterTitle:(NSString *)sectionFooterTitle </Declaration>
            <Abstract>Returns an initialized SCTableViewSection given a header and a footer title.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCBadgeView.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCBadgeView</TokenIdentifier>
            <DeclaredIn>SCBadgeView.h</DeclaredIn>
            <Abstract>This class functions as a badge similar to the one used by iPhone's mail application to display the number of messages in an inbox. SCBadgeView is most commonly used by SCTableViewCell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCBadgeView/color</TokenIdentifier>
            <Anchor>color</Anchor>
            <DeclaredIn>SCBadgeView.h</DeclaredIn>
            <Declaration>@property UIColor *color</Declaration>
            <Abstract>The color of the badge. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCBadgeView/text</TokenIdentifier>
            <Anchor>text</Anchor>
            <DeclaredIn>SCBadgeView.h</DeclaredIn>
            <Declaration>@property NSString *text</Declaration>
            <Abstract>The text displayed by the badge. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCBadgeView/font</TokenIdentifier>
            <Anchor>font</Anchor>
            <DeclaredIn>SCBadgeView.h</DeclaredIn>
            <Declaration>@property UIFont *font</Declaration>
            <Abstract>The font of the text. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCSelectionAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSelectionAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeSelection, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/items</TokenIdentifier>
            <Anchor>items</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSArray *items</Declaration>
            <Abstract>The items of the generated selection control. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/allowMultipleSelection</TokenIdentifier>
            <Anchor>allowMultipleSelection</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL allowMultipleSelection</Declaration>
            <Abstract>Determines if the generated selection control allows multiple selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/allowNoSelection</TokenIdentifier>
            <Anchor>allowNoSelection</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL allowNoSelection</Declaration>
            <Abstract>Determines if the generated selection control allows no selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/autoDismissDetailView</TokenIdentifier>
            <Anchor>autoDismissDetailView</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL autoDismissDetailView</Declaration>
            <Abstract>Set to TRUE to automatically dismiss the selection detail view when an item is selected. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/hideDetailViewNavigationBar</TokenIdentifier>
            <Anchor>hideDetailViewNavigationBar</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL hideDetailViewNavigationBar</Declaration>
            <Abstract>Set to TRUE to hide the detail view's navigation bar. Note: Only applicable if autoDismissDetailView is TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/attributesWithItems:allowMultipleSelection:allowNoSelection:</TokenIdentifier>
            <Anchor>attributesWithItems:allowMultipleSelection:allowNoSelection:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithItems:(NSArray *)_items allowMultipleSelection:(BOOL)allowMultipleSel allowNoSelection:(BOOL)allowNoSel </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/attributesWithItems:allowMultipleSelection:allowNoSelection:autoDismissDetailView:hideDetailViewNavigationBar:</TokenIdentifier>
            <Anchor>attributesWithItems:allowMultipleSelection:allowNoSelection:autoDismissDetailView:hideDetailViewNavigationBar:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithItems:(NSArray *)_items allowMultipleSelection:(BOOL)allowMultipleSel allowNoSelection:(BOOL)allowNoSel autoDismissDetailView:(BOOL)autoDismiss hideDetailViewNavigationBar:(BOOL)hideNavBar </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/initWithItems:allowMultipleSelection:allowNoSelection:</TokenIdentifier>
            <Anchor>initWithItems:allowMultipleSelection:allowNoSelection:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithItems:(NSArray *)_items allowMultipleSelection:(BOOL)allowMultipleSel allowNoSelection:(BOOL)allowNoSel </Declaration>
            <Abstract>Returns an initialized SCSelectionAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionAttributes/initWithItems:allowMultipleSelection:allowNoSelection:autoDismissDetailView:hideDetailViewNavigationBar:</TokenIdentifier>
            <Anchor>initWithItems:allowMultipleSelection:allowNoSelection:autoDismissDetailView:hideDetailViewNavigationBar:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithItems:(NSArray *)_items allowMultipleSelection:(BOOL)allowMultipleSel allowNoSelection:(BOOL)allowNoSel autoDismissDetailView:(BOOL)autoDismiss hideDetailViewNavigationBar:(BOOL)hideNavBar </Declaration>
            <Abstract>Returns an initialized SCSelectionAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCDateCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCDateCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell that provides the end-user with an automatically generated detail view of a UIDatePicker to choose a date from. The bound property name or bound key value of this cell must be of type NSDate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/datePicker</TokenIdentifier>
            <Anchor>datePicker</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UIDatePicker *datePicker</Declaration>
            <Abstract>The UIDatePicker control associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/dateFormatter</TokenIdentifier>
            <Anchor>dateFormatter</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSDateFormatter *dateFormatter</Declaration>
            <Abstract>Set to customize how the cell display's the selected date. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/displaySelectedDate</TokenIdentifier>
            <Anchor>displaySelectedDate</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL displaySelectedDate</Declaration>
            <Abstract>If TRUE, the cell displays the selected date in a left aligned label. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/allowDetailView</TokenIdentifier>
            <Anchor>allowDetailView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowDetailView</Declaration>
            <Abstract>Allows/disables a detail view for editing the cell's date. Default: TRUE.A detail view is automatically generated for editing the cell's date. You can control wether the view appears as a modal view or gets pushed to the navigation stack using the detailViewModal property. Modal views have the added feature of giving the end user a Cancel and Done buttons. The Cancel button cancels all user's actions, while the Done button commits them. Also, if the cell's validation is enabled, the Done button will remain disabled until all cells' values are valid. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/detailViewModal</TokenIdentifier>
            <Anchor>detailViewModal</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL detailViewModal</Declaration>
            <Abstract>If TRUE, the detail view always appears as a modal view. If FALSE and a navigation controller exists, the detail view is pushed to the navigation controller's stack, otherwise the view appears modally. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/cellWithText:withBoundObject:withDatePropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withDatePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withDatePropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCDateCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/cellWithText:withBoundKey:withDateValue:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withDateValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withDateValue:(NSDate *)dateValue </Declaration>
            <Abstract>Allocates and returns an initialized SCDateCell given cell text, bound key, and initial date value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/initWithText:withBoundObject:withDatePropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withDatePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withDatePropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCDateCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateCell/initWithText:withBoundKey:withDateValue:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withDateValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withDateValue:(NSDate *)dateValue </Declaration>
            <Abstract>Returns an initialized SCDateCell given cell text, bound key, and initial date value. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfItemsModel.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfItemsModel</TokenIdentifier>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Abstract>This class subclasses SCTableViewModel to represent an array of any kind of items and will automatically generate its cells from these items. SCArrayOfItemsModel will automatically generate a set of SCArrayOfItemsSection(s) if the SCTableViewModelDataSource method tableViewModel:sectionHeaderTitleForItem:AtIndex: is implemented, otherwise it will only generate a single SCArrayOfItemsSection.Important: This is an abstract base class, you should never make any direct instances of it.See also: SCArrayOfStringsModel, SCArrayOfObjectsModel, SCArrayOfStringsSection, SCArrayOfObjectsSection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/items</TokenIdentifier>
            <Anchor>items</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSMutableArray *items</Declaration>
            <Abstract>The array of items that the model uses to generate its cells from.This array must be of type NSMutableArray, as it must support the model's add, delete, and move operations. If you do not wish to allow these operations on your array, you can either pass an array using [NSMutableArray arrayWithArray:myArray], or you can disable the functionality from the user interface by setting the allowAddingItems, allowDeletingItems, allowMovingItems, and allowEditDetailView properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/itemsAccessoryType</TokenIdentifier>
            <Anchor>itemsAccessoryType</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UITableViewCellAccessoryType itemsAccessoryType</Declaration>
            <Abstract>The accessory type of the generated cells. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/allowAddingItems</TokenIdentifier>
            <Anchor>allowAddingItems</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL allowAddingItems</Declaration>
            <Abstract>Allows/disables adding new cells/items to the items array. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/allowDeletingItems</TokenIdentifier>
            <Anchor>allowDeletingItems</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL allowDeletingItems</Declaration>
            <Abstract>Allows/disables deleting new cells/items from the items array. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/allowMovingItems</TokenIdentifier>
            <Anchor>allowMovingItems</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL allowMovingItems</Declaration>
            <Abstract>Allows/disables moving cells/items from one row to another. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/allowEditDetailView</TokenIdentifier>
            <Anchor>allowEditDetailView</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL allowEditDetailView</Declaration>
            <Abstract>Allows/disables a detail view for editing items' values. Default: TRUE.Detail views are automatically generated for editing new items. You can control wether the view appears as a modal view or gets pushed to the navigation stack using the detailViewModal property. Modal views have the added feature of giving the end user a Cancel and Done buttons. The Cancel button cancels all user's actions, while the Done button commits them. Also, if the cell's validation is enabled, the Done button will remain disabled until all cells' values are valid. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/allowRowSelection</TokenIdentifier>
            <Anchor>allowRowSelection</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL allowRowSelection</Declaration>
            <Abstract>Allows/disables row selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/detailViewModal</TokenIdentifier>
            <Anchor>detailViewModal</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL detailViewModal</Declaration>
            <Abstract>If TRUE, the detail view always appears as a modal view. If FALSE and a navigation controller exists, the detail view is pushed to the navigation controller's stack, otherwise the view appears modally. Default: FALSE.Note: This value has no effect on the detail view generated to add new items, as it always appears modally. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/detailTableViewStyle</TokenIdentifier>
            <Anchor>detailTableViewStyle</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UITableViewStyle detailTableViewStyle</Declaration>
            <Abstract>The modal presentation style of the section's detail view.The view style of the detail view's table. Default: UITableViewStyleGrouped. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/detailViewHidesBottomBar</TokenIdentifier>
            <Anchor>detailViewHidesBottomBar</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL detailViewHidesBottomBar</Declaration>
            <Abstract>Indicates whether the bar at the bottom of the screen is hidden when the section's detail view is pushed. Default: TRUE. Note: Only applicable to cells with detail views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/addButtonItem</TokenIdentifier>
            <Anchor>addButtonItem</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *addButtonItem</Declaration>
            <Abstract>Set this property to a valid UIBarButtonItem. When addButtonItem is tapped and allowAddingItems is TRUE, a detail view is automatically generated for the user to enter the new items properties. If the properties are commited, a new item is added to the array </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/searchBar</TokenIdentifier>
            <Anchor>searchBar</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UISearchBar *searchBar</Declaration>
            <Abstract>The search bar associated with the model. Once set to a valid UISearchBar, the model will automatically filter its items based on the user's typed search term. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/initWithTableView:withViewController:withItems:</TokenIdentifier>
            <Anchor>initWithTableView:withViewController:withItems:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (id)initWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withItems:(NSMutableArray *)_items </Declaration>
            <Abstract>Returns an initialized SCArrayOfItemsModel given a UITableView, UIViewController, and an array of items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/createSectionWithHeaderTitle:</TokenIdentifier>
            <Anchor>createSectionWithHeaderTitle:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (SCArrayOfItemsSection *)createSectionWithHeaderTitle:(NSString *)title </Declaration>
            <Abstract>Subclasses should override this method to handle section creation. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/setPropertiesForSection:</TokenIdentifier>
            <Anchor>setPropertiesForSection:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)setPropertiesForSection:(SCArrayOfItemsSection *)section </Declaration>
            <Abstract>Subclasses should override this method to set additional section properties after creation. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/didTapAddButtonItem</TokenIdentifier>
            <Anchor>didTapAddButtonItem</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)didTapAddButtonItem</Declaration>
            <Abstract>Subclasses should override this method to handle when addButtonItem is tapped. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsModel/addNewItem:</TokenIdentifier>
            <Anchor>addNewItem:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)addNewItem:(NSObject *)newItem </Declaration>
            <Abstract>Method called internally by framework when the model should add a new item. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCTextViewCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTextViewCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell with a UITextView control. The bound property name or bound key value of this cell must be of type NSString. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/textView</TokenIdentifier>
            <Anchor>textView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UITextView *textView</Declaration>
            <Abstract>The UITextView control associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/autoResize</TokenIdentifier>
            <Anchor>autoResize</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL autoResize</Declaration>
            <Abstract>Determines if textView should automatically resize to fit its contents. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/minimumHeight</TokenIdentifier>
            <Anchor>minimumHeight</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGFloat minimumHeight</Declaration>
            <Abstract>The minimum height for textView. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/maximumHeight</TokenIdentifier>
            <Anchor>maximumHeight</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGFloat maximumHeight</Declaration>
            <Abstract>The maximum height for textView. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/cellWithText:withBoundObject:withTextViewTextPropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withTextViewTextPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withTextViewTextPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCTextViewCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/cellWithText:withBoundKey:withTextViewTextValue:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withTextViewTextValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withTextViewTextValue:(NSString *)textViewTextValue </Declaration>
            <Abstract>Allocates and returns an initialized SCTextViewCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/initWithText:withBoundObject:withTextViewTextPropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withTextViewTextPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withTextViewTextPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCTextViewCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewCell/initWithText:withBoundKey:withTextViewTextValue:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withTextViewTextValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withTextViewTextValue:(NSString *)textViewTextValue </Declaration>
            <Abstract>Returns an initialized SCTextViewCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
    </File>
    <File path="Protocols/SCTableViewControllerDelegate.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/intf/SCTableViewControllerDelegate</TokenIdentifier>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Abstract>This protocol should be adopted by objects that want to mediate as a delegate for SCTableViewController. All methods for this protocol are optional. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewControllerDelegate/tableViewControllerDidAppear:</TokenIdentifier>
            <Anchor>tableViewControllerDidAppear:</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (void)tableViewControllerDidAppear:(SCTableViewController *)tableViewController </Declaration>
            <Abstract>Notifies the delegate that the view controller has appeared. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewControllerDelegate/tableViewControllerDidDisappear:cancelButtonTapped:doneButtonTapped:</TokenIdentifier>
            <Anchor>tableViewControllerDidDisappear:cancelButtonTapped:doneButtonTapped:</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (void)tableViewControllerDidDisappear:(SCTableViewController *)tableViewController cancelButtonTapped:(BOOL)cancelTapped doneButtonTapped:(BOOL)doneTapped </Declaration>
            <Abstract>Notifies the delegate that the view controller has disappeared. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewControllerDelegate/tableViewControllerWillAppear:</TokenIdentifier>
            <Anchor>tableViewControllerWillAppear:</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (void)tableViewControllerWillAppear:(SCTableViewController *)tableViewController </Declaration>
            <Abstract>Notifies the delegate that the view controller will appear. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewControllerDelegate/tableViewControllerWillDisappear:cancelButtonTapped:doneButtonTapped:</TokenIdentifier>
            <Anchor>tableViewControllerWillDisappear:cancelButtonTapped:doneButtonTapped:</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (void)tableViewControllerWillDisappear:(SCTableViewController *)tableViewController cancelButtonTapped:(BOOL)cancelTapped doneButtonTapped:(BOOL)doneTapped </Declaration>
            <Abstract>Notifies the delegate that the view controller will disappear. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCSelectionCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSelectionCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell that provides the end-user with an automatically generated detail view of options to choose from, much like the Ringtone selection cell in the iPhone's sound settings. The selection items are provided in the form of an array of NSStrings, called the items array. SCSelection cell can be configured to allow multiple selection and to allow no selection at all. If allow multiple selection is disabled, then the bound property name or bound key value of this cell must be of type NSNumber, otherwise it must be of type NSMutableSet.See also: SCSelectionSection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/items</TokenIdentifier>
            <Anchor>items</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSArray *items</Declaration>
            <Abstract>The selection items array. All array elements must be of NSString type. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/selectedItemIndex</TokenIdentifier>
            <Anchor>selectedItemIndex</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSNumber *selectedItemIndex</Declaration>
            <Abstract>This property reflects the current cell's selection. You can set this property to define the cell's selection.Note: If you have bound this cell to an object or a key, you can define the cell's selection using either the bound property value or the key value, respectively. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/selectedItemsIndexes</TokenIdentifier>
            <Anchor>selectedItemsIndexes</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSMutableSet *selectedItemsIndexes</Declaration>
            <Abstract>This property reflects the current cell's selection(s). You can add index(es) to the set to define the cell's selection.Note: If you have bound this cell to an object or a key, you can define the cell's selection using either the bound property value or the key value, respectively. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/allowMultipleSelection</TokenIdentifier>
            <Anchor>allowMultipleSelection</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowMultipleSelection</Declaration>
            <Abstract>If TRUE, the cell allows multiple selection. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/allowNoSelection</TokenIdentifier>
            <Anchor>allowNoSelection</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowNoSelection</Declaration>
            <Abstract>If TRUE, the cell allows no selection at all. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/autoDismissDetailView</TokenIdentifier>
            <Anchor>autoDismissDetailView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL autoDismissDetailView</Declaration>
            <Abstract>If TRUE, the detail view is automatically dismissed when an item is selected. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/hideDetailViewNavigationBar</TokenIdentifier>
            <Anchor>hideDetailViewNavigationBar</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL hideDetailViewNavigationBar</Declaration>
            <Abstract>If TRUE, the detail view's navigation bar is hidder. Default: FALSE. Note: Only applicable when autoDismissDetailView is TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/displaySelection</TokenIdentifier>
            <Anchor>displaySelection</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL displaySelection</Declaration>
            <Abstract>If TRUE, the cell displays the selected items' titles inside the cell in a left aligned label. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/delimeter</TokenIdentifier>
            <Anchor>delimeter</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *delimeter</Declaration>
            <Abstract>The delimeter that separates the titles of the selected items. Default: " ,".Note: This property is applicable only if displaySelection is TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/cellWithText:withBoundObject:withSelectedIndexPropertyName:withItems:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withSelectedIndexPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedIndexPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionCell given cell text, bound object, an NSNumber bound property name, and an array of selection items. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/cellWithText:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedIndexesPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionCell given cell text, bound object, a bound property name, an array of selection items, and whether to allow multiple selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/cellWithText:withBoundObject:withSelectionStringPropertyName:withItems:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withSelectionStringPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectionStringPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionCell given cell text, bound object, an NSString bound property name, and an array of selection items. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/cellWithText:withBoundKey:withSelectedIndexValue:withItems:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withSelectedIndexValue:withItems:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withSelectedIndexValue:(NSNumber *)selectedIndexValue withItems:(NSArray *)cellItems </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionCell given cell text, bound key, an initial selected index value, and an array of selection items. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/cellWithText:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withSelectedIndexesValue:(NSMutableSet *)selectedIndexesValue withItems:(NSArray *)cellItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionCell given cell text, bound key, an initial selected indexes value, an array of selection items, and whether to allow multiple selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/initWithText:withBoundObject:withSelectedIndexPropertyName:withItems:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withSelectedIndexPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedIndexPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems </Declaration>
            <Abstract>Returns an initialized SCSelectionCell given cell text, bound object, an NSNumber bound property name, and an array of selection items. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/initWithText:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedIndexesPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Returns an initialized SCSelectionCell given cell text, bound object, a bound property name, an array of selection items, and whether to allow multiple selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/initWithText:withBoundObject:withSelectionStringPropertyName:withItems:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withSelectionStringPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectionStringPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems </Declaration>
            <Abstract>Returns an initialized SCSelectionCell given cell text, bound object, an NSString bound property name, and an array of selection items. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/initWithText:withBoundKey:withSelectedIndexValue:withItems:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withSelectedIndexValue:withItems:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withSelectedIndexValue:(NSNumber *)selectedIndexValue withItems:(NSArray *)cellItems </Declaration>
            <Abstract>Returns an initialized SCSelectionCell given cell text, bound key, an initial selected index value, and an array of selection items. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionCell/initWithText:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withSelectedIndexesValue:(NSMutableSet *)selectedIndexesValue withItems:(NSArray *)cellItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionCell given cell text, bound key, an initial selected indexes value, an array of selection items, and whether to allow multiple selection. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCTextFieldAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTextFieldAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeTextField, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldAttributes/placeholder</TokenIdentifier>
            <Anchor>placeholder</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSString *placeholder</Declaration>
            <Abstract>The placeholder of the generated UITextField control. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldAttributes/attributesWithPlaceholder:</TokenIdentifier>
            <Anchor>attributesWithPlaceholder:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithPlaceholder:(NSString *)_placeholder </Declaration>
            <Abstract>Allocates and returns an initialized SCTextFieldAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldAttributes/initWithPlaceholder:</TokenIdentifier>
            <Anchor>initWithPlaceholder:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithPlaceholder:(NSString *)_placeholder </Declaration>
            <Abstract>Returns an initialized SCTextFieldAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCViewController.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCViewController</TokenIdentifier>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Abstract>This class functions as a means to simplify development with SCTableViewModel.SCViewController conveniently provides several ready made navigation bar types based on SCNavigationBarType, provided that it is a subview of a navigation controller. SCViewController also defines placeholders for a tableView and a tableViewModel that the user can allocate and assign. If a tableViewModel is defined, SCViewController also connects its doneButton (if present) to tableViewModel's commitButton automatically. In addition, SCViewController provides several delegate methods as part of SCViewControllerDelegate that notifies the delegate object of events like the view appearing or disappearing.Note: You do NOT have to use SCViewController in order to be able to use SCTableViewModel, it is just provided as an additional convenience to you.Note: Some Sensible TableView objects use SCViewController to display their own detail views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/tableView</TokenIdentifier>
            <Anchor>tableView</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property IBOutlet UITableView *tableView</Declaration>
            <Abstract>This can optionally be set if the user wishes to display a table view in the view controller. Note: If the table view is added programmatically, then the user also needs to add it to the view controller's view. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/tableViewModel</TokenIdentifier>
            <Anchor>tableViewModel</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property SCTableViewModel *tableViewModel</Declaration>
            <Abstract>This can optionally be set if the user wishes to associate a table view model to tableView. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/navigationBarType</TokenIdentifier>
            <Anchor>navigationBarType</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property SCNavigationBarType navigationBarType</Declaration>
            <Abstract>The type of the navigation bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/addButton</TokenIdentifier>
            <Anchor>addButton</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *addButton</Declaration>
            <Abstract>The navigation bar's Add button. Only contains a value if the button exists on the bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/editButton</TokenIdentifier>
            <Anchor>editButton</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *editButton</Declaration>
            <Abstract>The editButtonItem of SCViewController's superclass. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/cancelButton</TokenIdentifier>
            <Anchor>cancelButton</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *cancelButton</Declaration>
            <Abstract>The navigation bar's Cancel button. Only contains a value if the button exists on the bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/doneButton</TokenIdentifier>
            <Anchor>doneButton</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *doneButton</Declaration>
            <Abstract>The navigation bar's Done button. Only contains a value if the button exists on the bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/cancelButtonTapped</TokenIdentifier>
            <Anchor>cancelButtonTapped</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property BOOL cancelButtonTapped</Declaration>
            <Abstract>Property is TRUE if the view controller have been dismissed due to the user tapping the Cancel button. This property is useful if you do not with to subclass this view controller. See also SCViewControllerDelegate to get notified when the view controller is dismissed. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/doneButtonTapped</TokenIdentifier>
            <Anchor>doneButtonTapped</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property BOOL doneButtonTapped</Declaration>
            <Abstract>Property is TRUE if the view controller have been dismissed due to the user tapping the Done button. This property is useful if you do not with to subclass this view controller. See also SCViewControllerDelegate to get notified when the view controller is dismissed. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/delegate</TokenIdentifier>
            <Anchor>delegate</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property id delegate</Declaration>
            <Abstract>The object that acts as the delegate of SCViewController. The object must adopt the SCViewControllerDelegate protocol. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/ownerViewController</TokenIdentifier>
            <Anchor>ownerViewController</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>@property UIViewController *ownerViewController</Declaration>
            <Abstract>The view controller's owner (used internally) </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/cancelButtonAction</TokenIdentifier>
            <Anchor>cancelButtonAction</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>- (void)cancelButtonAction</Declaration>
            <Abstract>Method gets called when the Cancel button is tapped. If what you want is to get notified when the Cancel button gets tapped without subclassing SCViewController, consider using SCViewControllerDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/doneButtonAction</TokenIdentifier>
            <Anchor>doneButtonAction</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>- (void)doneButtonAction</Declaration>
            <Abstract>Method gets called when the Done button is tapped. If what you want is to get notified when the Cancel button gets tapped without subclassing SCViewController, consider using SCViewControllerDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCViewController/dismissWithCancelValue:doneValue:</TokenIdentifier>
            <Anchor>dismissWithCancelValue:doneValue:</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>- (void)dismissWithCancelValue:(BOOL)cancelValue doneValue:(BOOL)doneValue </Declaration>
            <Abstract>Dismisses the view controller with the specified values for cancel and done. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCSegmentedCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSegmentedCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell with a UISegmentedControl. The bound property name or bound key value of this cell must be of type NSNumber. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedCell/segmentedControl</TokenIdentifier>
            <Anchor>segmentedControl</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UISegmentedControl *segmentedControl</Declaration>
            <Abstract>The UISegmentedControl associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedCell/createSegmentsUsingArray:</TokenIdentifier>
            <Anchor>createSegmentsUsingArray:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)createSegmentsUsingArray:(NSArray *)segmentTitlesArray </Declaration>
            <Abstract>Method creates segmented control segments based on the content of the segmentTitlesArray. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedCell/cellWithText:withBoundObject:withSelectedSegmentIndexPropertyName:withSegmentTitlesArray:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withSelectedSegmentIndexPropertyName:withSegmentTitlesArray:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedSegmentIndexPropertyName:(NSString *)propertyName withSegmentTitlesArray:(NSArray *)cellSegmentTitlesArray </Declaration>
            <Abstract>Allocates and returns an initialized SCSegmentedCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedCell/cellWithText:withBoundKey:withSelectedSegmentIndexValue:withSegmentTitlesArray:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withSelectedSegmentIndexValue:withSegmentTitlesArray:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withSelectedSegmentIndexValue:(NSNumber *)selectedSegmentIndexValue withSegmentTitlesArray:(NSArray *)cellSegmentTitlesArray </Declaration>
            <Abstract>Allocates and returns an initialized SCSegmentedCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedCell/initWithText:withBoundObject:withSelectedSegmentIndexPropertyName:withSegmentTitlesArray:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withSelectedSegmentIndexPropertyName:withSegmentTitlesArray:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedSegmentIndexPropertyName:(NSString *)propertyName withSegmentTitlesArray:(NSArray *)cellSegmentTitlesArray </Declaration>
            <Abstract>Returns an initialized SCSegmentedCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedCell/initWithText:withBoundKey:withSelectedSegmentIndexValue:withSegmentTitlesArray:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withSelectedSegmentIndexValue:withSegmentTitlesArray:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withSelectedSegmentIndexValue:(NSNumber *)selectedSegmentIndexValue withSegmentTitlesArray:(NSArray *)cellSegmentTitlesArray </Declaration>
            <Abstract>Returns an initialized SCSegmentedCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedCell/segmentedControlValueChanged</TokenIdentifier>
            <Anchor>segmentedControlValueChanged</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)segmentedControlValueChanged</Declaration>
            <Abstract>Method gets called internally whenever the value of segmented control is changed. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCObjectCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCObjectCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell that is able to automatically generate a detail view with cells generated from a given bound object's properties. If the bound object is given without an extended class definition (SCClassDefinition), then the cells will only be generated for properties of type NSString and NSNumber, and will be either of type SCTextFieldCell or SCNumericTextFieldCell, respectively. If an SCClassDefinition is provided for the bound object, a full fledged detail view of cells will be generated.When SCObjectCell is selected by the end-user, a detail view optionally fires up to to give the user the ability to edit the object's properties.See also: SCObjectSection, SCArrayOfObjectsSection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/objectClassDefinition</TokenIdentifier>
            <Anchor>objectClassDefinition</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property SCClassDefinition *objectClassDefinition</Declaration>
            <Abstract>The extended class definition of the bound object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/boundObjectTitleText</TokenIdentifier>
            <Anchor>boundObjectTitleText</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *boundObjectTitleText</Declaration>
            <Abstract>The bound object title that will appear in the cell's textLabel.If this value is nil, SCObjectCell uses the value of the title property found in objectClassDefinition. Set this value to override the default behaviour and provide your own title text for the object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/allowDetailView</TokenIdentifier>
            <Anchor>allowDetailView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowDetailView</Declaration>
            <Abstract>Allows/disables a detail view for editing the bound object's properties. Default: TRUE.A detail view is automatically generated for editing the bound object's properties. You can control wether the view appears as a modal view or gets pushed to the navigation stack using the detailViewModal property. Modal views have the added feature of giving the end user a Cancel and Done buttons. The Cancel button cancels all user's actions, while the Done button commits them. Also, if the cell's validation is enabled, the Done button will remain disabled until all cells' values are valid. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/detailViewModal</TokenIdentifier>
            <Anchor>detailViewModal</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL detailViewModal</Declaration>
            <Abstract>If TRUE, the detail view always appears as a modal view. If FALSE and a navigation controller exists, the detail view is pushed to the navigation controller's stack, otherwise the view appears modally. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/cellWithBoundObject:</TokenIdentifier>
            <Anchor>cellWithBoundObject:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithBoundObject:(NSObject *)object </Declaration>
            <Abstract>Allocates and returns an initialized SCObjectCell given a bound object.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/cellWithBoundObject:withClassDefinition:</TokenIdentifier>
            <Anchor>cellWithBoundObject:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithBoundObject:(NSObject *)object withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCObjectCell given a bound object and a class definition.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/initWithBoundObject:</TokenIdentifier>
            <Anchor>initWithBoundObject:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithBoundObject:(NSObject *)object </Declaration>
            <Abstract>Returns an initialized SCObjectCell given a bound object.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/initWithBoundObject:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithBoundObject:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithBoundObject:(NSObject *)object withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCObjectCell given a bound object and a class definition.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectCell/setBoundPropertyName:</TokenIdentifier>
            <Anchor>setBoundPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)setBoundPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Method is for internal use only, never call this method directly. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCTableViewController.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTableViewController</TokenIdentifier>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Abstract>This class simplifies development with SCTableViewModel the same way that UITableViewController simplifies development with UITableView.SCTableViewController conveniently creates an automatic tableViewModel that is ready to be populated with sections and cells. It also provides several ready made navigation bar types based on SCNavigationBarType, provided that it is a subview of a navigation controller. Furthermore, it automatically connects its doneButton (if present) to tableViewModel's commitButton. In addition, SCTableViewController provides several delegate methods as part of SCTableViewControllerDelegate that notifies the delegate object of events like the view appearing or disappearing.Note: You do NOT have to use SCTableViewController in order to be able to use SCTableViewModel, it is just provided as an additional convenience to you.Note: Some Sensible TableView objects use SCTableViewController to display their own detail views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/tableViewModel</TokenIdentifier>
            <Anchor>tableViewModel</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property SCTableViewModel *tableViewModel</Declaration>
            <Abstract>The associated table view model. This model is configured and ready to be populated with sections and cells. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/navigationBarType</TokenIdentifier>
            <Anchor>navigationBarType</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property SCNavigationBarType navigationBarType</Declaration>
            <Abstract>The type of the navigation bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/addButton</TokenIdentifier>
            <Anchor>addButton</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *addButton</Declaration>
            <Abstract>The navigation bar's Add button. Only contains a value if the button exists on the bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/editButton</TokenIdentifier>
            <Anchor>editButton</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *editButton</Declaration>
            <Abstract>The editButtonItem of SCTableViewController's superclass. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/cancelButton</TokenIdentifier>
            <Anchor>cancelButton</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *cancelButton</Declaration>
            <Abstract>The navigation bar's Cancel button. Only contains a value if the button exists on the bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/doneButton</TokenIdentifier>
            <Anchor>doneButton</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *doneButton</Declaration>
            <Abstract>The navigation bar's Done button. Only contains a value if the button exists on the bar. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/cancelButtonTapped</TokenIdentifier>
            <Anchor>cancelButtonTapped</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property BOOL cancelButtonTapped</Declaration>
            <Abstract>Property is TRUE if the view controller have been dismissed due to the user tapping the Cancel button. This property is useful if you do not wish to subclass this view controller. See also SCTableViewControllerDelegate to get notified when the view controller is dismissed. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/doneButtonTapped</TokenIdentifier>
            <Anchor>doneButtonTapped</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property BOOL doneButtonTapped</Declaration>
            <Abstract>Property is TRUE if the view controller have been dismissed due to the user tapping the Done button. This property is useful if you do not wish to subclass this view controller. See also SCTableViewControllerDelegate to get notified when the view controller is dismissed. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/delegate</TokenIdentifier>
            <Anchor>delegate</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property id delegate</Declaration>
            <Abstract>The object that acts as the delegate of SCTableViewController. The object must adopt the SCTableViewControllerDelegate protocol. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/ownerViewController</TokenIdentifier>
            <Anchor>ownerViewController</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>@property UIViewController *ownerViewController</Declaration>
            <Abstract>The view controller's owner (used internally) </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/cancelButtonAction</TokenIdentifier>
            <Anchor>cancelButtonAction</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (void)cancelButtonAction</Declaration>
            <Abstract>Method gets called when the Cancel button is tapped. If what you want is to get notified when the Cancel button gets tapped without subclassing SCTableViewController, consider using SCTableViewControllerDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/doneButtonAction</TokenIdentifier>
            <Anchor>doneButtonAction</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (void)doneButtonAction</Declaration>
            <Abstract>Method gets called when the Done button is tapped. If what you want is to get notified when the Cancel button gets tapped without subclassing SCTableViewController, consider using SCTableViewControllerDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/dismissWithCancelValue:doneValue:</TokenIdentifier>
            <Anchor>dismissWithCancelValue:doneValue:</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (void)dismissWithCancelValue:(BOOL)cancelValue doneValue:(BOOL)doneValue </Declaration>
            <Abstract>Dismisses the view controller with the specified values for cancel and done. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewController/initWithStyle:withNavigationBarType:</TokenIdentifier>
            <Anchor>initWithStyle:withNavigationBarType:</Anchor>
            <DeclaredIn>SCTableViewController.h</DeclaredIn>
            <Declaration>- (id)initWithStyle:(UITableViewStyle)style withNavigationBarType:(SCNavigationBarType)type </Declaration>
            <Abstract>Returns an initialized SCTableViewController given a navigation bar type.</Abstract>
        </Token>
    </File>
    <File path="Protocols/SCViewControllerDelegate.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/intf/SCViewControllerDelegate</TokenIdentifier>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Abstract>This protocol should be adopted by objects that want to mediate as a delegate for SCViewController. All methods for this protocol are optional. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCViewControllerDelegate/viewControllerDidAppear:</TokenIdentifier>
            <Anchor>viewControllerDidAppear:</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>- (void)viewControllerDidAppear:(SCViewController *)viewController </Declaration>
            <Abstract>Notifies the delegate that the view controller has appeared. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCViewControllerDelegate/viewControllerDidDisappear:cancelButtonTapped:doneButtonTapped:</TokenIdentifier>
            <Anchor>viewControllerDidDisappear:cancelButtonTapped:doneButtonTapped:</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>- (void)viewControllerDidDisappear:(SCViewController *)viewController cancelButtonTapped:(BOOL)cancelTapped doneButtonTapped:(BOOL)doneTapped </Declaration>
            <Abstract>Notifies the delegate that the view controller has disappeared. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCViewControllerDelegate/viewControllerWillAppear:</TokenIdentifier>
            <Anchor>viewControllerWillAppear:</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>- (void)viewControllerWillAppear:(SCViewController *)viewController </Declaration>
            <Abstract>Notifies the delegate that the view controller will appear. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCViewControllerDelegate/viewControllerWillDisappear:cancelButtonTapped:doneButtonTapped:</TokenIdentifier>
            <Anchor>viewControllerWillDisappear:cancelButtonTapped:doneButtonTapped:</Anchor>
            <DeclaredIn>SCViewController.h</DeclaredIn>
            <Declaration>- (void)viewControllerWillDisappear:(SCViewController *)viewController cancelButtonTapped:(BOOL)cancelTapped doneButtonTapped:(BOOL)doneTapped </Declaration>
            <Abstract>Notifies the delegate that the view controller will disappear. </Abstract>
        </Token>
    </File>
    <File path="Protocols/SCTableViewModelDataSource.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/intf/SCTableViewModelDataSource</TokenIdentifier>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Abstract>This protocol should be adopted by objects that want to mediate as a data source for SCTableViewModel. All methods for this protocol are optional. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDataSource/tableViewModel:customDetailTableViewModelForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:customDetailTableViewModelForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (SCTableViewModel *)tableViewModel:(SCTableViewModel *)tableViewModel customDetailTableViewModelForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Asks the dataSource to provide a custom detail table view model for the specified cell. This custom table view model will be used to render the cell's details instead of the default automatically generated detail model. The returned model is typically a blank model with no sections (all content will be generated by the requesting cell). Important: This method should only be implemented for cells that require a detail UITableView to display their contents. For cells that do not require a detail UITableView (e.g.: SCImagePickerCell), you should implement the tableViewModel:customDetailViewForRowAtIndexPath: method instead. Note: This method is typically used to display the cell's details in the detail view of an iPad's UISplitViewController.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDataSource/tableViewModel:customDetailViewForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:customDetailViewForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (UIViewController *)tableViewModel:(SCTableViewModel *)tableViewModel customDetailViewForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Asks the dataSource to provide a custom detail view controller for the specified cell. This custom detail view will be used to render the cell's details instead of the default automatically generated detail view controller. Important: This method should only be implemented for cells that do not require a detail UITableView to display their contents (e.g.: SCImagePickerCell). For all other cells that do require a detail UITableView, you should implement the tableViewModel:customTableViewModelForRowAtIndexPath: method instead. Note: This method is typically used to display the cell's details in the detail view of an iPad's UISplitViewController.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDataSource/tableViewModel:commitEditingStyle:forRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:commitEditingStyle:forRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Asks the dataSource to handle to the insertion or deletion of the specified row in the model.Important: It is very rare when you'll need to define this method. If you are using an SCArrayOfItemsSection or any of its subclasses, the insertion and deletion of rows will be handeled for you automatically.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDataSource/tableViewModel:moveRowAtIndexPath:toIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:moveRowAtIndexPath:toIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath </Declaration>
            <Abstract>Asks the dataSource to handle to the movement of the specified row in the model from a specified location to another.Important: It is very rare when you'll need to define this method. If you are using an SCArrayOfItemsSection or any of its subclasses, the movement of rows will be handeled for you automatically.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDataSource/tableViewModel:sectionHeaderTitleForItem:AtIndex:</TokenIdentifier>
            <Anchor>tableViewModel:sectionHeaderTitleForItem:AtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (NSString *)tableViewModel:(SCArrayOfItemsModel *)tableViewModel sectionHeaderTitleForItem:(NSObject *)item AtIndex:(NSUInteger)index </Declaration>
            <Abstract>Asks the dataSource to return the section header title for the given item index.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDataSource/tableViewModel:newItemForArrayOfItemsSectionAtIndex:</TokenIdentifier>
            <Anchor>tableViewModel:newItemForArrayOfItemsSectionAtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (NSObject *)tableViewModel:(SCTableViewModel *)tableViewModel newItemForArrayOfItemsSectionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Asks the dataSource to handle the creation of a new item in an SCArrayOfItemsSection.When there is an attempt to create a new array item in an SCArrayOfItemsSection, the dataSource is asked to provide this new item. If the dataSource does not define this method, SCArrayOfItemsSection creates an item of the same class as the first item in the array. If no items are in the array, and this method is not defined, no new objects can be created.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCSegmentedAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSegmentedAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeSegmented, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedAttributes/segmentTitlesArray</TokenIdentifier>
            <Anchor>segmentTitlesArray</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSArray *segmentTitlesArray</Declaration>
            <Abstract>The segment titles of the generated UISegmentedControl. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedAttributes/attributesWithSegmentTitlesArray:</TokenIdentifier>
            <Anchor>attributesWithSegmentTitlesArray:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithSegmentTitlesArray:(NSArray *)titles </Declaration>
            <Abstract>Allocates and returns an initialized SCSegmentedAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSegmentedAttributes/initWithSegmentTitlesArray:</TokenIdentifier>
            <Anchor>initWithSegmentTitlesArray:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithSegmentTitlesArray:(NSArray *)titles </Declaration>
            <Abstract>Returns an initialized SCSegmentedFieldAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCSliderAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSliderAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeSlider, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderAttributes/minimumValue</TokenIdentifier>
            <Anchor>minimumValue</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property float minimumValue</Declaration>
            <Abstract>The minimum value of the generated UISlider control. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderAttributes/maximumValue</TokenIdentifier>
            <Anchor>maximumValue</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property float maximumValue</Declaration>
            <Abstract>The maximum value of the generated UISlider control. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderAttributes/attributesWithMinimumValue:maximumValue:</TokenIdentifier>
            <Anchor>attributesWithMinimumValue:maximumValue:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithMinimumValue:(float)minValue maximumValue:(float)maxValue </Declaration>
            <Abstract>Allocates and returns an initialized SCSliderAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderAttributes/initWithMinimumValue:maximumValue:</TokenIdentifier>
            <Anchor>initWithMinimumValue:maximumValue:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithMinimumValue:(float)minValue maximumValue:(float)maxValue </Declaration>
            <Abstract>Returns an initialized SCSliderAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCTableViewModel.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTableViewModel</TokenIdentifier>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Abstract>This class is the master mind behind all of Sensible TableView's functionality.Sensible TableView provides an alternative easy way to create sophisticated table views very quickly. The sophistication of these table views can range from simple text cells, to cells with controls, to cells that get automatically generated from your own classes. SCTableViewModel also automatically generates detail views for common tasks such as selecting cell values or creating new objects. Using SCTableViewModel, you can simply create full functioning applications in a matter of minutes.SCTableViewModel is designed to be loosely coupled with your user interface elements. What this means is that you can use SCTableViewModel with Apple's default UITableView or with any of your custom UITableView subclasses. Similarly, you can use SCTableViewModel with any UIViewController, or any of its subclasses, including UITableViewController or your own subclasses. In addition, SCTableViewModel's auto generated detail views will work whether you use a navigation controller or not.Architecture:An SCTableViewModel defines a table view model with several sections, each section being of type SCTableViewSection. Each SCTableViewSection can contain several cells, each cell being of type SCTableViewCell. SCTableViewModel's functionality can also be extended using SCTableViewModelDataSource and SCTableViewModelDelegate</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/editButtonItem</TokenIdentifier>
            <Anchor>editButtonItem</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *editButtonItem</Declaration>
            <Abstract>When set to a valid UIBarButtonItem, SCTableViewModel automatically puts its table view in edit mode when the button is tapped. Note: Not required if your view controller is a UITableViewController subclass, or if you do not wish to implement editing specific SCTableViewModelDelegate methods. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/autoResizeForKeyboard</TokenIdentifier>
            <Anchor>autoResizeForKeyboard</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL autoResizeForKeyboard</Declaration>
            <Abstract>If TRUE, SCTableViewModel will automatically resize the modeledTableView when the keyboard appears. Property has no effect if viewController is a UITableViewController, as the UITableViewController will handle the resizing itself. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/sectionIndexTitles</TokenIdentifier>
            <Anchor>sectionIndexTitles</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSArray *sectionIndexTitles</Declaration>
            <Abstract>An array of strings that serve as the title of sections in the modeledTableView and appear in the index list on the right side of the modeledTableView. modeledTableView must be in plain style for the index to appear. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/autoGenerateSectionIndexTitles</TokenIdentifier>
            <Anchor>autoGenerateSectionIndexTitles</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL autoGenerateSectionIndexTitles</Declaration>
            <Abstract>If TRUE, SCTableViewModel will automatically generate the sectionIndexTitles array from the first letter of each section's header title. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/autoSortSections</TokenIdentifier>
            <Anchor>autoSortSections</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL autoSortSections</Declaration>
            <Abstract>If TRUE, SCTableViewModel will automatically sort its sections according to their header title value. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/hideSectionHeaderTitles</TokenIdentifier>
            <Anchor>hideSectionHeaderTitles</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL hideSectionHeaderTitles</Declaration>
            <Abstract>If TRUE, all section header titles will be hidden. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/lockCellSelection</TokenIdentifier>
            <Anchor>lockCellSelection</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL lockCellSelection</Declaration>
            <Abstract>If TRUE, SCTableViewModel will prevent any cell from being selected. Default: FALSE. Note: for preventing individual cells from being selected, use SCTableViewCell "selectable" property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/tag</TokenIdentifier>
            <Anchor>tag</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSInteger tag</Declaration>
            <Abstract>An integer that you can use to identify different table view models in your application. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/pauseAutoResizeForKeyboard</TokenIdentifier>
            <Anchor>pauseAutoResizeForKeyboard</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)pauseAutoResizeForKeyboard</Declaration>
            <Abstract>Pauses auto resizing when keyboard appears. This method should be called before displaying any of your own detail view controllers on top of the model's view controller. This is to disable the model from processing and acting to keyboard notifications. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/resumeAutoResizeForKeyboard</TokenIdentifier>
            <Anchor>resumeAutoResizeForKeyboard</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)resumeAutoResizeForKeyboard</Declaration>
            <Abstract>Resumes auto resizing if autoResizeForKeyboard was TRUE at the time pauseAutoResizeForKeyboard was called, otherwise it does nothing. Method should be called after your own detail controller disappears. This method should only be called if pauseAutoResizeForKeyboard was called first. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/sectionCount</TokenIdentifier>
            <Anchor>sectionCount</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSUInteger sectionCount</Declaration>
            <Abstract>The number of sections in the model. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/addSection:</TokenIdentifier>
            <Anchor>addSection:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)addSection:(SCTableViewSection *)section </Declaration>
            <Abstract>Adds a new section to the model. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/insertSection:atIndex:</TokenIdentifier>
            <Anchor>insertSection:atIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)insertSection:(SCTableViewSection *)section atIndex:(NSUInteger)index </Declaration>
            <Abstract>Inserts a new section at the specified index. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/sectionAtIndex:</TokenIdentifier>
            <Anchor>sectionAtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (SCTableViewSection *)sectionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Returns the section at the specified index. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/sectionWithHeaderTitle:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (SCTableViewSection *)sectionWithHeaderTitle:(NSString *)title </Declaration>
            <Abstract>Returns the first section with the specified header title. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/indexForSection:</TokenIdentifier>
            <Anchor>indexForSection:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (NSUInteger)indexForSection:(SCTableViewSection *)section </Declaration>
            <Abstract>Returns the index of the specified section. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/removeSectionAtIndex:</TokenIdentifier>
            <Anchor>removeSectionAtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)removeSectionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Removes the section at the specified index from the model. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/previousActiveCell</TokenIdentifier>
            <Anchor>previousActiveCell</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property SCTableViewCell *previousActiveCell</Declaration>
            <Abstract>The cell that was active previous to the current activeCell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/activeCell</TokenIdentifier>
            <Anchor>activeCell</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property SCTableViewCell *activeCell</Declaration>
            <Abstract>The current active cell. A cell becomes active if it is selected or if its value changes. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/activeCellIndexPath</TokenIdentifier>
            <Anchor>activeCellIndexPath</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSIndexPath *activeCellIndexPath</Declaration>
            <Abstract>The indexPath of the activeCell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/cellAtIndexPath:</TokenIdentifier>
            <Anchor>cellAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (SCTableViewCell *)cellAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Returns the cell at the specified indexPath. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/indexPathForCell:</TokenIdentifier>
            <Anchor>indexPathForCell:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (NSIndexPath *)indexPathForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Returns the index path for the specified cell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/cellAfterCell:rewindIfLastCell:</TokenIdentifier>
            <Anchor>cellAfterCell:rewindIfLastCell:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (SCTableViewCell *)cellAfterCell:(SCTableViewCell *)cell rewindIfLastCell:(BOOL)rewind </Declaration>
            <Abstract>Returns the cell that comes after the specified cell in the model. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/modelKeyValues</TokenIdentifier>
            <Anchor>modelKeyValues</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSMutableDictionary *modelKeyValues</Declaration>
            <Abstract>An NSMutableDictionary of all the model's key/value pairs. The keys and their respective values are present only if the model's cells and sections are bound to these keys. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/valuesAreValid</TokenIdentifier>
            <Anchor>valuesAreValid</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL valuesAreValid</Declaration>
            <Abstract>TRUE if all the model's section and cell values are valid. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/commitButton</TokenIdentifier>
            <Anchor>commitButton</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *commitButton</Declaration>
            <Abstract>SCTableViewModel will automatically enable/disable the commitButton based on the valuesAreValid property, where commitButton is enabled if valuesAreValid is TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/reloadBoundValues</TokenIdentifier>
            <Anchor>reloadBoundValues</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)reloadBoundValues</Declaration>
            <Abstract>Reload's the model's bound values in case the associated bound objects or keys valuea has changed by means other than the cells themselves (e.g. external custom code). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/dataSource</TokenIdentifier>
            <Anchor>dataSource</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property id dataSource</Declaration>
            <Abstract>The object that acts as the data source of SCTableViewModel. The object must adopt the SCTableViewModelDataSource protocol. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/delegate</TokenIdentifier>
            <Anchor>delegate</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property id delegate</Declaration>
            <Abstract>The object that acts as the delegate of SCTableViewModel. The object must adopt the SCTableViewModelDelegate protocol. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/modeledTableView</TokenIdentifier>
            <Anchor>modeledTableView</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UITableView *modeledTableView</Declaration>
            <Abstract>The UITableView bound to SCTableViewModel. This property is readonly, to set modeledTableView, use the class initilizers. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/viewController</TokenIdentifier>
            <Anchor>viewController</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property UIViewController *viewController</Declaration>
            <Abstract>The UIViewController bound to SCTableViewModel. This property is readonly, to set viewController, use the class initilizers. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/clear</TokenIdentifier>
            <Anchor>clear</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)clear</Declaration>
            <Abstract>Clears all contents of the model. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/masterModel</TokenIdentifier>
            <Anchor>masterModel</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property SCTableViewModel *masterModel</Declaration>
            <Abstract>Property is used internally by the framework to set the master model in a master-detail relationship. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/valueChangedForSectionAtIndex:</TokenIdentifier>
            <Anchor>valueChangedForSectionAtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)valueChangedForSectionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Method gets called internally whenever the value of a section changes. This method should only be used when subclassing SCTableViewModel. If what you want is to get notified when a section value changes, consider using SCTableViewModelDelegate methods.When subclassing SCTableViewModel, you can override this method to define custom behaviour when a section value changes. However, you should always call [super valueChangedForSectionAtIndex:] somewhere in your subclassed method.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/valueChangedForRowAtIndexPath:</TokenIdentifier>
            <Anchor>valueChangedForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)valueChangedForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Method gets called internally whenever the value of a cell changes. This method should only be used when subclassing SCTableViewModel. If what you want is to get notified when a cell value changes, consider using either SCTableViewModelDelegate or SCTableViewCellDelegate methods.When subclassing SCTableViewModel, you can override this method to define custom behaviour when a cell value changes. However, you should always call [super valueChangedForRowAtIndexPath:] somewhere in your subclassed method.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/setTargetForModelModifiedEvent:action:</TokenIdentifier>
            <Anchor>setTargetForModelModifiedEvent:action:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)setTargetForModelModifiedEvent:(id)_target action:(SEL)_action </Declaration>
            <Abstract>Method used internally by the framework to monitor model modification events. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/didTapEditButtonItem</TokenIdentifier>
            <Anchor>didTapEditButtonItem</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)didTapEditButtonItem</Declaration>
            <Abstract>Subclasses should override this method to handle when editButtonItem is tapped. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/replaceModeledTableViewWith:</TokenIdentifier>
            <Anchor>replaceModeledTableViewWith:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)replaceModeledTableViewWith:(UITableView *)tableView </Declaration>
            <Abstract>Method used internally to replace the modeled tableview. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/tableViewModelWithTableView:withViewController:</TokenIdentifier>
            <Anchor>tableViewModelWithTableView:withViewController:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>+ (id)tableViewModelWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController </Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewModel bound to a UITableView and a UIViewController.Upon the model's initialization, the model sets itself as the modeledTableView's dataSource and delegate, and starts providing it with its sections and cells.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewModel/initWithTableView:withViewController:</TokenIdentifier>
            <Anchor>initWithTableView:withViewController:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (id)initWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController </Declaration>
            <Abstract>Returns an initialized SCTableViewModel bound to a UITableView and a UIViewController.Upon the model's initialization, the model sets itself as the modeledTableView's dataSource and delegate, and starts providing it with its sections and cells.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCTextViewAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTextViewAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeTextView, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewAttributes/minimumHeight</TokenIdentifier>
            <Anchor>minimumHeight</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property CGFloat minimumHeight</Declaration>
            <Abstract>The minimum height of the generated UITextView control. Set to a negative value to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewAttributes/maximumHeight</TokenIdentifier>
            <Anchor>maximumHeight</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property CGFloat maximumHeight</Declaration>
            <Abstract>The maximum height of the generated UITextView control. Set to a negative value to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewAttributes/autoResize</TokenIdentifier>
            <Anchor>autoResize</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL autoResize</Declaration>
            <Abstract>Determines whether the generated UITextView control will auto resize. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewAttributes/editable</TokenIdentifier>
            <Anchor>editable</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL editable</Declaration>
            <Abstract>Determines whether the generated UITextView control will be editable. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewAttributes/attributesWithMinimumHeight:maximumHeight:autoResize:editable:</TokenIdentifier>
            <Anchor>attributesWithMinimumHeight:maximumHeight:autoResize:editable:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithMinimumHeight:(CGFloat)minHeight maximumHeight:(CGFloat)maxHeight autoResize:(BOOL)_autoResize editable:(BOOL)_editable </Declaration>
            <Abstract>Allocates and returns an initialized SCTextViewAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextViewAttributes/initWithMinimumHeight:maximumHeight:autoResize:editable:</TokenIdentifier>
            <Anchor>initWithMinimumHeight:maximumHeight:autoResize:editable:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithMinimumHeight:(CGFloat)minHeight maximumHeight:(CGFloat)maxHeight autoResize:(BOOL)_autoResize editable:(BOOL)_editable </Declaration>
            <Abstract>Returns an initialized SCTextViewAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCObjectSection.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCObjectSection</TokenIdentifier>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Abstract>This class functions as an SCTableViewModel section that is able to automatically generate its cells from a given bound object's properties. If the bound object is given without an extended class definition (SCClassDefinition), then cells will only be generated for properties of type NSString and NSNumber, and will be either of type SCTextFieldCell or SCNumericTextFieldCell, respectively. If an SCClassDefinition is provided for the bound object, a full fledged section of cells will be generated.Note: For your convenience, the tag property of each generated cell will have a number corresponding to the index of it's corresponding property in bound object.See also: SCArrayOfObjectsSection, SCObjectCell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSection/sectionWithHeaderTitle:withBoundObject:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withBoundObject:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object </Declaration>
            <Abstract>Allocates and returns an initialized SCObjectSection given a header title and a bound object.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSection/sectionWithHeaderTitle:withBoundObject:withClassDefinition:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withBoundObject:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCObjectSection given a header title, a bound object and its extended class definition.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSection/initWithHeaderTitle:withBoundObject:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withBoundObject:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object </Declaration>
            <Abstract>Returns an initialized SCObjectSection given a header title and a bound object.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSection/initWithHeaderTitle:withBoundObject:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withBoundObject:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCObjectSection given a header title, a bound object and its extended class definition.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSection/cellForPropertyName:</TokenIdentifier>
            <Anchor>cellForPropertyName:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (SCTableViewCell *)cellForPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns the cell associated with the given bound object's property name. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCObjectAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCObjectAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeObject, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectAttributes/classDefinitions</TokenIdentifier>
            <Anchor>classDefinitions</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSMutableDictionary *classDefinitions</Declaration>
            <Abstract>Should contain all the different class definitions needed by the generated object control. Each dictionary entry should contain a key with the SCClassDefinition class name, and a value with the actual SCClassDefinition.Tip: The class name of the SCClassDefinition can be easily determined using the SClassDefinition.className property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectAttributes/attributesWithObjectClassDefinition:</TokenIdentifier>
            <Anchor>attributesWithObjectClassDefinition:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithObjectClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCObjectAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectAttributes/initWithObjectClassDefinition:</TokenIdentifier>
            <Anchor>initWithObjectClassDefinition:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithObjectClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCObjectAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCNumericTextFieldCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCNumericTextFieldCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell with a UITextField control with numeric values. The bound property name or bound key value of this cell must be of type NSNumber. SCNumericTextFieldCell defines its own validation rules according to the following criteria:Value is valid only if it's a numeric value.If minimumValue is not nil, then value is only valid if it's greater than or equal to this value.If maximumValue is not nil, then value is only valid if it's less than or equal to this value.If allowFloatValue is FALSE, then value is only valid if it's an integer value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldCell/minimumValue</TokenIdentifier>
            <Anchor>minimumValue</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSNumber *minimumValue</Declaration>
            <Abstract>The minimum valid cell value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldCell/maximumValue</TokenIdentifier>
            <Anchor>maximumValue</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSNumber *maximumValue</Declaration>
            <Abstract>The maximum valid cell value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldCell/allowFloatValue</TokenIdentifier>
            <Anchor>allowFloatValue</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowFloatValue</Declaration>
            <Abstract>If FALSE, only integer cell values are valid. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldCell/displayZeroAsBlank</TokenIdentifier>
            <Anchor>displayZeroAsBlank</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL displayZeroAsBlank</Declaration>
            <Abstract>If TRUE, an empty space is displayed if the bound value equals zero. Default: FALSE. </Abstract>
        </Token>
    </File>
    <File path="Protocols/SCTableViewModelDelegate.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/intf/SCTableViewModelDelegate</TokenIdentifier>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Abstract>This protocol should be adopted by objects that want to mediate as a delegate for SCTableViewModel. All methods for this protocol are optional. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelWillBeginEditing:</TokenIdentifier>
            <Anchor>tableViewModelWillBeginEditing:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelWillBeginEditing:(SCTableViewModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the table view will enter editing mode. Note: For this method to get fired, the SCTableViewModel editButtonItem property must be set. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelDidBeginEditing:</TokenIdentifier>
            <Anchor>tableViewModelDidBeginEditing:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelDidBeginEditing:(SCTableViewModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the table view did enter editing mode. Note: For this method to get fired, the SCTableViewModel editButtonItem property must be set. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelWillEndEditing:</TokenIdentifier>
            <Anchor>tableViewModelWillEndEditing:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelWillEndEditing:(SCTableViewModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the table view will exit editing mode. Note: For this method to get fired, the SCTableViewModel editButtonItem property must be set. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelDidEndEditing:</TokenIdentifier>
            <Anchor>tableViewModelDidEndEditing:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelDidEndEditing:(SCTableViewModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the table view did exit editing mode. Note: For this method to get fired, the SCTableViewModel editButtonItem property must be set. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:valueChangedForSectionAtIndex:</TokenIdentifier>
            <Anchor>tableViewModel:valueChangedForSectionAtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel valueChangedForSectionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Notifies the delegate that the value for the section at the specified index has changed.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:detailViewWillAppearForSectionAtIndex:withDetailTableViewModel:</TokenIdentifier>
            <Anchor>tableViewModel:detailViewWillAppearForSectionAtIndex:withDetailTableViewModel:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel detailViewWillAppearForSectionAtIndex:(NSUInteger)index withDetailTableViewModel:(SCTableViewModel *)detailTableViewModel </Declaration>
            <Abstract>Notifies the delegate that the detail view for the section at the specified index will appear. This is the perfect time to do any customizations to the section's detail view model.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:detailViewWillDisappearForSectionAtIndex:</TokenIdentifier>
            <Anchor>tableViewModel:detailViewWillDisappearForSectionAtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel detailViewWillDisappearForSectionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Notifies the delegate that the detail view for the section at the specified index will disappear.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:detailViewDidDisappearForSectionAtIndex:</TokenIdentifier>
            <Anchor>tableViewModel:detailViewDidDisappearForSectionAtIndex:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel detailViewDidDisappearForSectionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Notifies the delegate that the detail view for the section at the specified index has disappeared.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:itemCreatedForSectionAtIndex:item:</TokenIdentifier>
            <Anchor>tableViewModel:itemCreatedForSectionAtIndex:item:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel itemCreatedForSectionAtIndex:(NSUInteger)index item:(NSObject *)item </Declaration>
            <Abstract>Notifies the delegate that a new item bound cell has been created for the section at the specified index. Note: Method usually called for SCArrayOfItemsSection's subclasses. Important: Although item has been created, it's still not added to the section and can be deallocated if the user cancels the item's detail view.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:itemAddedForSectionAtIndexPath:item:</TokenIdentifier>
            <Anchor>tableViewModel:itemAddedForSectionAtIndexPath:item:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel itemAddedForSectionAtIndexPath:(NSIndexPath *)indexPath item:(NSObject *)item </Declaration>
            <Abstract>Notifies the delegate that a new item bound cell has been added to a section at the specified indexPath. Note: Method usually called for SCArrayOfItemsSection's subclasses.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:itemEditedForSectionAtIndexPath:item:</TokenIdentifier>
            <Anchor>tableViewModel:itemEditedForSectionAtIndexPath:item:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel itemEditedForSectionAtIndexPath:(NSIndexPath *)indexPath item:(NSObject *)item </Declaration>
            <Abstract>Notifies the delegate that an item bound cell has been edited for a section at the specified indexPath. Note: Method usually called for SCArrayOfItemsSection's subclasses.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:willConfigureCell:forRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:willConfigureCell:forRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel willConfigureCell:(SCTableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the cell at the specified indexPath is about to be configured in its owner UITableView. This is the perfect time to do any customization to the cell's height, editable, and movable properties.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:willDisplayCell:forRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:willDisplayCell:forRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel willDisplayCell:(SCTableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the cell at the specified indexPath will be displayed. This is the perfect place to do any customization to the cell's appearance.Note: To change cell properties like the height, editable, or movable states, use the willConfigureCell delegate method instead.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:willSelectRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:willSelectRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel willSelectRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the cell at the specified indexPath will be selected.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:didSelectRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:didSelectRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel didSelectRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the cell at the specified indexPath has been selected.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:didDeselectRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:didDeselectRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel didDeselectRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the cell at the specified indexPath has been deselected.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:accessoryButtonTappedForRowWithIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:accessoryButtonTappedForRowWithIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the accessory button for the cell at the specified indexPath has been selected.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:valueChangedForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:valueChangedForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel valueChangedForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the value of the cell at the specified indexPath has changed.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:valueIsValidForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:valueIsValidForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (BOOL)tableViewModel:(SCTableViewModel *)tableViewModel valueIsValidForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Asks the delegate if the value is valid for the cell at the specified indexPath. Define this method if you want to override the cells' default value validation and provide your own custom validation.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:returnButtonTappedForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:returnButtonTappedForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel returnButtonTappedForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the return keyboard button has been tapped for the cell at the specified indexPath. Define this method if you want to override the cells' default behaviour for tapping the return button.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:didInsertRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:didInsertRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel didInsertRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that cell at the specified indexPath has been newly inserted.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:willRemoveRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:willRemoveRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (BOOL)tableViewModel:(SCTableViewModel *)tableViewModel willRemoveRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that cell at the specified indexPath will be removed.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:detailViewWillAppearForRowAtIndexPath:withDetailTableViewModel:</TokenIdentifier>
            <Anchor>tableViewModel:detailViewWillAppearForRowAtIndexPath:withDetailTableViewModel:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel detailViewWillAppearForRowAtIndexPath:(NSIndexPath *)indexPath withDetailTableViewModel:(SCTableViewModel *)detailTableViewModel </Declaration>
            <Abstract>Notifies the delegate that the detail view for the cell at the specified indexPath will appear. This is the perfect time to do any customizations to the cell's detail view model.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:detailViewWillDisappearForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:detailViewWillDisappearForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel detailViewWillDisappearForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the detail view for the cell at the specified indexPath will disappear.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:detailViewDidDisappearForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:detailViewDidDisappearForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCTableViewModel *)tableViewModel detailViewDidDisappearForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Notifies the delegate that the detail view for the cell at the specified indexPath has disappeared.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:newImageNameForRowAtIndexPath:</TokenIdentifier>
            <Anchor>tableViewModel:newImageNameForRowAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (NSString *)tableViewModel:(SCTableViewModel *)tableViewModel newImageNameForRowAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Asks the delegate for a new image name for the SCImagePickerCell at the specified indexPath. Define this method to provide a new name for the selected image, instead of using the auto generated one.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModel:searchBarSelectedScopeButtonIndexDidChange:</TokenIdentifier>
            <Anchor>tableViewModel:searchBarSelectedScopeButtonIndexDidChange:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModel:(SCArrayOfItemsModel *)tableViewModel searchBarSelectedScopeButtonIndexDidChange:(NSInteger)selectedScope </Declaration>
            <Abstract>Notifies the delegate that the search bar scope button selection changed.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelSearchBarBookmarkButtonClicked:</TokenIdentifier>
            <Anchor>tableViewModelSearchBarBookmarkButtonClicked:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelSearchBarBookmarkButtonClicked:(SCArrayOfItemsModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the search bar bookmark button was tapped.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelSearchBarCancelButtonClicked:</TokenIdentifier>
            <Anchor>tableViewModelSearchBarCancelButtonClicked:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelSearchBarCancelButtonClicked:(SCArrayOfItemsModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the search bar cancel button was tapped.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelSearchBarResultsListButtonClicked:</TokenIdentifier>
            <Anchor>tableViewModelSearchBarResultsListButtonClicked:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelSearchBarResultsListButtonClicked:(SCArrayOfItemsModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the search bar results list button was tapped.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewModelDelegate/tableViewModelSearchBarSearchButtonClicked:</TokenIdentifier>
            <Anchor>tableViewModelSearchBarSearchButtonClicked:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (void)tableViewModelSearchBarSearchButtonClicked:(SCArrayOfItemsModel *)tableViewModel </Declaration>
            <Abstract>Notifies the delegate that the search bar search button was tapped.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCTextFieldCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTextFieldCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell with a UITextField control. The bound property name or bound key value of this cell must be of type NSString. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldCell/textField</TokenIdentifier>
            <Anchor>textField</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UITextField *textField</Declaration>
            <Abstract>The UITextField control associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldCell/cellWithText:withPlaceholder:withBoundObject:withTextFieldTextPropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withPlaceholder:withBoundObject:withTextFieldTextPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withPlaceholder:(NSString *)placeholder withBoundObject:(NSObject *)object withTextFieldTextPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCTextFieldCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldCell/cellWithText:withPlaceholder:withBoundKey:withTextFieldTextValue:</TokenIdentifier>
            <Anchor>cellWithText:withPlaceholder:withBoundKey:withTextFieldTextValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withPlaceholder:(NSString *)placeholder withBoundKey:(NSString *)key withTextFieldTextValue:(NSString *)textFieldTextValue </Declaration>
            <Abstract>Allocates and returns an initialized SCTextFieldCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldCell/initWithText:withPlaceholder:withBoundObject:withTextFieldTextPropertyName:</TokenIdentifier>
            <Anchor>initWithText:withPlaceholder:withBoundObject:withTextFieldTextPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withPlaceholder:(NSString *)placeholder withBoundObject:(NSObject *)object withTextFieldTextPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCTextFieldCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldCell/initWithText:withPlaceholder:withBoundKey:withTextFieldTextValue:</TokenIdentifier>
            <Anchor>initWithText:withPlaceholder:withBoundKey:withTextFieldTextValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withPlaceholder:(NSString *)placeholder withBoundKey:(NSString *)key withTextFieldTextValue:(NSString *)textFieldTextValue </Declaration>
            <Abstract>Returns an initialized SCTextFieldCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTextFieldCell/textFieldEditingChanged</TokenIdentifier>
            <Anchor>textFieldEditingChanged</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)textFieldEditingChanged</Declaration>
            <Abstract>Method gets called internally whenever the value of textField is changed. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfObjectsCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfObjectsCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell that, given an array of objects, will generate an SCArrayOfObjectsSection detail view that's displayed when the cell is tapped. The cell can also be optionally bound to an object and generate an additional SCObjectSection detail view when the cell is tapped while the table is in edit mode.See also: SCObjectCell, SCObjectSection, SCArrayOfObjectsSection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/items</TokenIdentifier>
            <Anchor>items</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSMutableArray *items</Declaration>
            <Abstract>The array of objects that the cell uses to generate its detail view.This array must be of type NSMutableArray, as it must support add, delete, and move operations. If you do not wish to allow these operations on your array, you can either pass an array using [NSMutableArray arrayWithArray:myArray], or you can disable the functionality from the user interface by setting the allowAddingItems, allowDeletingItems, allowMovingItems, and allowEditDetailView properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/itemsSet</TokenIdentifier>
            <Anchor>itemsSet</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSMutableSet *itemsSet</Declaration>
            <Abstract>The mutable set of objects that the cell will use to generate its detail view. Note: This property should only be set when representing a Core Data relationship. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/sortItemsSetAscending</TokenIdentifier>
            <Anchor>sortItemsSetAscending</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL sortItemsSetAscending</Declaration>
            <Abstract>If TRUE, objects in itemsSet are sorted ascendingly, otherwise they're sorted descendingly. Note: Only applicable if itemsSet has been assigned. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/itemsClassDefinitions</TokenIdentifier>
            <Anchor>itemsClassDefinitions</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSMutableDictionary *itemsClassDefinitions</Declaration>
            <Abstract>Contains all the different class definitions of all the objects in the items array. Each dictionary entry should contain a key with the SCClassDefinition class name, and a value with the actual SCClassDefinition.Tip: The class name of the SCClassDefinition can be easily determined using the SClassDefinition.className property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/allowAddingItems</TokenIdentifier>
            <Anchor>allowAddingItems</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowAddingItems</Declaration>
            <Abstract>Allows/disables adding new objects to the items array. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/allowDeletingItems</TokenIdentifier>
            <Anchor>allowDeletingItems</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowDeletingItems</Declaration>
            <Abstract>Allows/disables deleting new objects from the items array. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/allowMovingItems</TokenIdentifier>
            <Anchor>allowMovingItems</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowMovingItems</Declaration>
            <Abstract>Allows/disables moving objects from one row to another. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/allowEditDetailView</TokenIdentifier>
            <Anchor>allowEditDetailView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowEditDetailView</Declaration>
            <Abstract>Allows/disables editing detail views for objects. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/allowRowSelection</TokenIdentifier>
            <Anchor>allowRowSelection</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL allowRowSelection</Declaration>
            <Abstract>Allows/disables row selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/displayItemsCountInBadgeView</TokenIdentifier>
            <Anchor>displayItemsCountInBadgeView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL displayItemsCountInBadgeView</Declaration>
            <Abstract>Allows/disables displaying the number of objects in the cell's badgeView. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/cellWithItems:withClassDefinition:</TokenIdentifier>
            <Anchor>cellWithItems:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithItems:(NSMutableArray *)cellItems withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsCell given an array of objects and their class definition.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/cellWithItemsSet:withClassDefinition:</TokenIdentifier>
            <Anchor>cellWithItemsSet:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithItemsSet:(NSMutableSet *)cellItemsSet withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsCell given a mutable set of objects. This method should only be used to create a cell with the contents of a Core Data relationship.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/cellWithEntityClassDefinition:</TokenIdentifier>
            <Anchor>cellWithEntityClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithEntityClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsCell given a header title and an entity class definition. Note: This method creates a cell with all the objects that exist in classDefinition's entity's managedObjectContext. To create a cell with only a subset of these objects, consider using the other section initializers.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/initWithItems:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithItems:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithItems:(NSMutableArray *)cellItems withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsCell given an array of objects and their class definition.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/initWithItemsSet:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithItemsSet:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithItemsSet:(NSMutableSet *)cellItemsSet withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsCell given a mutable set of objects. This method should only be used to create a cell with the contents of a Core Data relationship.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsCell/initWithEntityClassDefinition:</TokenIdentifier>
            <Anchor>initWithEntityClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithEntityClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsCell given a header title and an entity class definition. Note: This method creates a cell with all the objects that exist in classDefinition's entity's managedObjectContext. To create a cell with only a subset of these objects, consider using the other section initializers.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCNumericTextFieldAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCNumericTextFieldAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeNumericTextField, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldAttributes/minimumValue</TokenIdentifier>
            <Anchor>minimumValue</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSNumber *minimumValue</Declaration>
            <Abstract>The minimum value allowed for the generated numeric text field control. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldAttributes/maximumValue</TokenIdentifier>
            <Anchor>maximumValue</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSNumber *maximumValue</Declaration>
            <Abstract>The maximum value allowed for the generated numeric text field control. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldAttributes/allowFloatValue</TokenIdentifier>
            <Anchor>allowFloatValue</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL allowFloatValue</Declaration>
            <Abstract>Determines if the generated numeric text field control allows float values. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldAttributes/attributesWithMinimumValue:maximumValue:allowFloatValue:</TokenIdentifier>
            <Anchor>attributesWithMinimumValue:maximumValue:allowFloatValue:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithMinimumValue:(NSNumber *)minValue maximumValue:(NSNumber *)maxValue allowFloatValue:(BOOL)allowFloat </Declaration>
            <Abstract>Allocates and returns an initialized SCNumericTextFieldAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldAttributes/attributesWithMinimumValue:maximumValue:allowFloatValue:placeholder:</TokenIdentifier>
            <Anchor>attributesWithMinimumValue:maximumValue:allowFloatValue:placeholder:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithMinimumValue:(NSNumber *)minValue maximumValue:(NSNumber *)maxValue allowFloatValue:(BOOL)allowFloat placeholder:(NSString *)_placeholder </Declaration>
            <Abstract>Allocates and returns an initialized SCNumericTextFieldAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldAttributes/initWithMinimumValue:maximumValue:allowFloatValue:</TokenIdentifier>
            <Anchor>initWithMinimumValue:maximumValue:allowFloatValue:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithMinimumValue:(NSNumber *)minValue maximumValue:(NSNumber *)maxValue allowFloatValue:(BOOL)allowFloat </Declaration>
            <Abstract>Returns an initialized SCNumericTextFieldAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCNumericTextFieldAttributes/initWithMinimumValue:maximumValue:allowFloatValue:placeholder:</TokenIdentifier>
            <Anchor>initWithMinimumValue:maximumValue:allowFloatValue:placeholder:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithMinimumValue:(NSNumber *)minValue maximumValue:(NSNumber *)maxValue allowFloatValue:(BOOL)allowFloat placeholder:(NSString *)_placeholder </Declaration>
            <Abstract>Returns an initialized SCNumericTextFieldAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCPropertyAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCPropertyAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is an abstract base class that represents a set of SCPropertyDefinition attributes.Each subclass of SCPropertyAttributes is used to extend the definition of an SCPropertyDefinition instance according to its respective type. Set the attributes property of an SCPropertyDefinition instance to a subclass to be able to further customize the user interface element that will be generated for this property definition.You should never make instances of this class. Use subclasses instead. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyAttributes/imageView</TokenIdentifier>
            <Anchor>imageView</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property UIImageView *imageView</Declaration>
            <Abstract>The image view assigned to the generated UI element. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyAttributes/imageViewArray</TokenIdentifier>
            <Anchor>imageViewArray</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSArray *imageViewArray</Declaration>
            <Abstract>The array of image views assigned to the detail elements of the generated UI element. The property is applicable to property definitions of type SCPropertyTypeSelection, SCPropertyTypeObject, and SCPropertyTypeArrayOfObjects. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfObjectsSection.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfObjectsSection</TokenIdentifier>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Abstract>This class functions as an SCTableViewModel section that is able to represent an array of any kind of objects and automatically generate its cells from these objects. In addition, SCArrayOfObjectsSection generates its detail views from the properties of the corresponding object in its items array. Objects in the items array need not all be of the same object type, but they must all decend from NSObject. If more than one type of object is present in the items array, then their respective class definitions should be added to the itemsClassDefinitions set.See also: SCObjectSection, SCObjectCell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/itemsClassDefinitions</TokenIdentifier>
            <Anchor>itemsClassDefinitions</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSMutableDictionary *itemsClassDefinitions</Declaration>
            <Abstract>Contains all the different class definitions of all the objects in the items array. Each dictionary entry should contain a key with the SCClassDefinition class name, and a value with the actual SCClassDefinition.Tip: The class name of the SCClassDefinition can be easily determined using the SClassDefinition.className property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/itemsSet</TokenIdentifier>
            <Anchor>itemsSet</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSMutableSet *itemsSet</Declaration>
            <Abstract>The mutable set of objects that the section will use to generate its cells. Note: This property should only be set when representing a Core Data relationship. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/sortItemsSetAscending</TokenIdentifier>
            <Anchor>sortItemsSetAscending</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL sortItemsSetAscending</Declaration>
            <Abstract>If TRUE, objects in itemsSet are sorted ascendingly, otherwise they're sorted descendingly. Note: Only applicable if itemsSet has been assigned. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/sectionWithHeaderTitle:withItems:withClassDefinition:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withItems:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withItems:(NSMutableArray *)sectionItems withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsSection given a header title and an array of objects.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/sectionWithHeaderTitle:withItemsSet:withClassDefinition:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withItemsSet:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withItemsSet:(NSMutableSet *)sectionItemsSet withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsSection given a header title and a mutable set of objects. This method should only be used to create a section with the contents of a Core Data relationship.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/sectionWithHeaderTitle:withEntityClassDefinition:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withEntityClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withEntityClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsSection given a header title and an entity class definition. Note: This method creates a section with all the objects that exist in classDefinition's entity's managedObjectContext. To create a section with only a subset of these objects, consider using the other section initializers.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/sectionWithHeaderTitle:withEntityClassDefinition:usingPredicate:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withEntityClassDefinition:usingPredicate:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withEntityClassDefinition:(SCClassDefinition *)classDefinition usingPredicate:(NSPredicate *)predicate </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsSection given a header title, an entity class definition, and an NSPredicate.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/initWithHeaderTitle:withItems:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withItems:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withItems:(NSMutableArray *)sectionItems withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsSection given a header title and an array of objects.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/initWithHeaderTitle:withItemsSet:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withItemsSet:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withItemsSet:(NSMutableSet *)sectionItemsSet withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsSection given a header title and a mutable set of objects. This method should only be used to create a section with the contents of a Core Data relationship.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/initWithHeaderTitle:withEntityClassDefinition:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withEntityClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withEntityClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsSection given a header title and an entity class definition. Note: This method creates a section with all the objects that exist in classDefinition's entity's managedObjectContext. To create a section with only a subset of these objects, consider using the other section initializers.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsSection/initWithHeaderTitle:withEntityClassDefinition:usingPredicate:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withEntityClassDefinition:usingPredicate:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withEntityClassDefinition:(SCClassDefinition *)classDefinition usingPredicate:(NSPredicate *)predicate </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsSection given a header title, an entity class definition, and an NSPredicate.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCPropertyDefinition.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCPropertyDefinition</TokenIdentifier>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Abstract>This class functions as a property definition for SCClassDefinition. Every property definition should set a property type that determines which user interface element should be generated for the property. In addition, the generated user interface element can be further customized using the property's attributes.See also: SCPropertyType, SCPropertyAttributes, SCClassDefinition. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/name</TokenIdentifier>
            <Anchor>name</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSString *name</Declaration>
            <Abstract>The name of the property associated with the property definition. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/title</TokenIdentifier>
            <Anchor>title</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSString *title</Declaration>
            <Abstract>The title of the property. Property titles are used by user interface elements to generate labels associated with the generated controls. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/type</TokenIdentifier>
            <Anchor>type</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property SCPropertyType type</Declaration>
            <Abstract>The type of the property. Property types determines which user interface element will be generated for the property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/attributes</TokenIdentifier>
            <Anchor>attributes</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property SCPropertyAttributes *attributes</Declaration>
            <Abstract>The attibutes set of the property. Property attributes gives the user the ability to further customize the user interface element that will be generated for the property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/required</TokenIdentifier>
            <Anchor>required</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property BOOL required</Declaration>
            <Abstract>Set to TRUE if property is a required property. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/autoValidate</TokenIdentifier>
            <Anchor>autoValidate</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property BOOL autoValidate</Declaration>
            <Abstract>Set to TRUE if the property value should be automatically validated by the user interface element before commiting it to the property. If the user chooses to provide custom validation using either the cell's SCTableViewCellDelegate, or the model's SCTableViewModelDelegate, they should set this property to FALSE. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/dataType</TokenIdentifier>
            <Anchor>dataType</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property SCPropertyDataType dataType</Declaration>
            <Abstract>This property is automatically set by the framework and should never be assigned a value directly. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/dataReadOnly</TokenIdentifier>
            <Anchor>dataReadOnly</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property BOOL dataReadOnly</Declaration>
            <Abstract>This property is automatically set by the framework and should never be assigned a value directly. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/definitionWithName:</TokenIdentifier>
            <Anchor>definitionWithName:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCPropertyDefinition given a property name.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/definitionWithName:title:type:</TokenIdentifier>
            <Anchor>definitionWithName:title:type:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithName:(NSString *)propertyName title:(NSString *)propertyTitle type:(SCPropertyType)propertyType </Declaration>
            <Abstract>Allocates and returns an initialized SCPropertyDefinition given a property name, title, and type.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/initWithName:</TokenIdentifier>
            <Anchor>initWithName:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCPropertyDefinition given a property name.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCPropertyDefinition/initWithName:title:type:</TokenIdentifier>
            <Anchor>initWithName:title:type:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithName:(NSString *)propertyName title:(NSString *)propertyTitle type:(SCPropertyType)propertyType </Declaration>
            <Abstract>Returns an initialized SCPropertyDefinition given a property name, title, and type.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCImagePickerCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCImagePickerCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell that provides the end-user with an automatically generated detail view of type UIImagePickerController to pick an image with. As soon as the image is picked, it will be saved to the Documents folder using either an auto generated name from the current time stamp, or a name provided through SCTableViewModelDelegate or SCTableViewCellDelegate. The bound property name or bound key value of this cell must be of type NSString, and will be bound to the name of the selected image. Once an image is selected, tapping an SCImagePickerCell will display the image in a detail view. To select a different image, the table view must be put in edit mode (make sure UITableView's allowsSelectionDuringEditing property is TRUE). Alternatively, make sure that displayClearImageButtonInDetailView property is TRUE, and the user will be able to tap a "Clear Image" button to clear the selected image. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/imagePickerController</TokenIdentifier>
            <Anchor>imagePickerController</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UIImagePickerController *imagePickerController</Declaration>
            <Abstract>The UIImagePickerController associated with the cell. Even though this property is readonly, feel free to customize any of the controller's relevant properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/selectedImage</TokenIdentifier>
            <Anchor>selectedImage</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UIImage *selectedImage</Declaration>
            <Abstract>The selected image. Returns nil if no image is selected. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/placeholderImageName</TokenIdentifier>
            <Anchor>placeholderImageName</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *placeholderImageName</Declaration>
            <Abstract>The name for an image in the documents folder that will be used as a placeholder if no image is selected. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/displayImageNameAsCellText</TokenIdentifier>
            <Anchor>displayImageNameAsCellText</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL displayImageNameAsCellText</Declaration>
            <Abstract>If TRUE, the selected image name will be displayed in the cell's textLabel. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/askForSourceType</TokenIdentifier>
            <Anchor>askForSourceType</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL askForSourceType</Declaration>
            <Abstract>If TRUE, the user will be asked for the source type, otherwise, the source type will be determined from imagePickerController's sourceType property. Default: TRUE. Note: If the device has no camera, setting this to TRUE automatically sets the sourceType to UIImagePickerControllerSourceTypePhotoLibrary. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/clearImageButton</TokenIdentifier>
            <Anchor>clearImageButton</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UIButton *clearImageButton</Declaration>
            <Abstract>A button that clears the currently selected image when tapped. Feel free to customize the default look and feel of this button. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/displayClearImageButtonInDetailView</TokenIdentifier>
            <Anchor>displayClearImageButtonInDetailView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL displayClearImageButtonInDetailView</Declaration>
            <Abstract>If TRUE, clearImageButton will be displayed in the cell's detail view. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/autoPositionClearImageButton</TokenIdentifier>
            <Anchor>autoPositionClearImageButton</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL autoPositionClearImageButton</Declaration>
            <Abstract>If TRUE, clearImageButton will be automatically positioned in the cell's detail view. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/textLabelFrame</TokenIdentifier>
            <Anchor>textLabelFrame</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGRect textLabelFrame</Declaration>
            <Abstract>Set this property to customize the placement of the cell's textLabel. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/imageViewFrame</TokenIdentifier>
            <Anchor>imageViewFrame</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGRect imageViewFrame</Declaration>
            <Abstract>Set this property to customize the placement of the cell's imageView. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/selectedImageName</TokenIdentifier>
            <Anchor>selectedImageName</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *selectedImageName</Declaration>
            <Abstract>The name of the selected image. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/resetClearImageButtonStyles</TokenIdentifier>
            <Anchor>resetClearImageButtonStyles</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)resetClearImageButtonStyles</Declaration>
            <Abstract>Resets the clearImageButton default layer styles such as corneRadius and borderWidth. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/cellWithText:withBoundObject:withImageNamePropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withImageNamePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withImageNamePropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCImagePickerCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/cellWithText:withBoundKey:withImageNameValue:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withImageNameValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withImageNameValue:(NSString *)imageNameValue </Declaration>
            <Abstract>Allocates and returns an initialized SCImagePickerCell given cell text, bound key, and initial image name value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/initWithText:withBoundObject:withImageNamePropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withImageNamePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withImageNamePropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCImagePickerCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCImagePickerCell/initWithText:withBoundKey:withImageNameValue:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withImageNameValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withImageNameValue:(NSString *)imageNameValue </Declaration>
            <Abstract>Returns an initialized SCImagePickerCell given cell text, bound key, and initial image name value. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfObjectsModel.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfObjectsModel</TokenIdentifier>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Abstract>This class functions as a table view model that is able to represent an array of any kind of objects and automatically generate its cells from these objects. In addition, SCArrayOfObjectsModel generates its detail views from the properties of the corresponding object in its items array. Objects in the items array need not all be of the same object type, but they must all decend from NSObject. If more than one type of object is present in the items array, then their respective class definitions should be added to the itemsClassDefinitions set.SCArrayOfItemsModel will automatically generate a set of SCArrayOfObjectsSection(s) if the SCTableViewModelDataSource method tableViewModel:sectionHeaderTitleForItem:AtIndex: is implemented, otherwise it will only generate a single SCArrayOfObjectsSection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/itemsClassDefinitions</TokenIdentifier>
            <Anchor>itemsClassDefinitions</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSMutableDictionary *itemsClassDefinitions</Declaration>
            <Abstract>Contains all the different class definitions of all the objects in the items array. Each dictionary entry should contain a key with the SCClassDefinition class name, and a value with the actual SCClassDefinition.Tip: The class name of the SCClassDefinition can be easily determined using the SClassDefinition.className property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/itemsSet</TokenIdentifier>
            <Anchor>itemsSet</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSMutableSet *itemsSet</Declaration>
            <Abstract>The mutable set of objects that the model will use to generate its cells. Note: This property should only be set when representing a Core Data relationship. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/sortItemsSetAscending</TokenIdentifier>
            <Anchor>sortItemsSetAscending</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property BOOL sortItemsSetAscending</Declaration>
            <Abstract>If TRUE, objects in itemsSet are sorted ascendingly, otherwise they're sorted descendingly. Note: Only applicable if itemsSet has been assigned. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/searchPropertyName</TokenIdentifier>
            <Anchor>searchPropertyName</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>@property NSString *searchPropertyName</Declaration>
            <Abstract>The name of the object's property that the value of which will be used to search the items array when the user types a search term inside the model's associated search bar. To search more than one property value, separate the property names by a semi-colon (e.g.: "firstName;lastName"). To search all 
	properties in the object's class definition, set the property to an astrisk (e.g.: @"*"). If the property is not set, it defaults to the value of the object's class definition titlePropertyName property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/tableViewModelWithTableView:withViewController:withItems:withClassDefinition:</TokenIdentifier>
            <Anchor>tableViewModelWithTableView:withViewController:withItems:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>+ (id)tableViewModelWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withItems:(NSMutableArray *)_items withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, and an array of objects.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/tableViewModelWithTableView:withViewController:withItemsSet:withClassDefinition:</TokenIdentifier>
            <Anchor>tableViewModelWithTableView:withViewController:withItemsSet:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>+ (id)tableViewModelWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withItemsSet:(NSMutableSet *)_itemsSet withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, and a mutable set of objects. This method should only be used to create a model with the contents of a Core Data relationship.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/tableViewModelWithTableView:withViewController:withEntityClassDefinition:</TokenIdentifier>
            <Anchor>tableViewModelWithTableView:withViewController:withEntityClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>+ (id)tableViewModelWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withEntityClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, and an entity class definition. Note: This method creates a model with all the objects that exist in classDefinition's entity's managedObjectContext. To create a model with only a subset of these objects, consider using the other SCArrayOfObjectsModel initializers.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/tableViewModelWithTableView:withViewController:withEntityClassDefinition:usingPredicate:</TokenIdentifier>
            <Anchor>tableViewModelWithTableView:withViewController:withEntityClassDefinition:usingPredicate:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>+ (id)tableViewModelWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withEntityClassDefinition:(SCClassDefinition *)classDefinition usingPredicate:(NSPredicate *)predicate </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, an entity class definition and an NSPredicate.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/initWithTableView:withViewController:withItems:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithTableView:withViewController:withItems:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (id)initWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withItems:(NSMutableArray *)_items withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, and an array of objects.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/initWithTableView:withViewController:withItemsSet:withClassDefinition:</TokenIdentifier>
            <Anchor>initWithTableView:withViewController:withItemsSet:withClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (id)initWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withItemsSet:(NSMutableSet *)_itemsSet withClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, and a mutable set of objects. This method should only be used to create a model with the contents of a Core Data relationship.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/initWithTableView:withViewController:withEntityClassDefinition:</TokenIdentifier>
            <Anchor>initWithTableView:withViewController:withEntityClassDefinition:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (id)initWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withEntityClassDefinition:(SCClassDefinition *)classDefinition </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, and an entity class definition. Note: This method creates a model with all the objects that exist in classDefinition's entity's managedObjectContext. To create a model with only a subset of these objects, consider using the other SCArrayOfObjectsModel initializers.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsModel/initWithTableView:withViewController:withEntityClassDefinition:usingPredicate:</TokenIdentifier>
            <Anchor>initWithTableView:withViewController:withEntityClassDefinition:usingPredicate:</Anchor>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Declaration>- (id)initWithTableView:(UITableView *)_modeledTableView withViewController:(UIViewController *)_viewController withEntityClassDefinition:(SCClassDefinition *)classDefinition usingPredicate:(NSPredicate *)predicate </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsModel given a UITableView, UIViewController, an entity class definition and an NSPredicate.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCSwitchCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSwitchCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell with a UISwitch control. The bound property name or bound key value of this cell must be of type NSNumber. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSwitchCell/switchControl</TokenIdentifier>
            <Anchor>switchControl</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UISwitch *switchControl</Declaration>
            <Abstract>The UISwitch control associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSwitchCell/cellWithText:withBoundObject:withSwitchOnPropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withSwitchOnPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSwitchOnPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCSwitchCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSwitchCell/cellWithText:withBoundKey:withSwitchOnValue:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withSwitchOnValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withSwitchOnValue:(NSNumber *)switchOnValue </Declaration>
            <Abstract>Allocates and returns an initialized SCSwitchCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSwitchCell/initWithText:withBoundObject:withSwitchOnPropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withSwitchOnPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSwitchOnPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCSwitchCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSwitchCell/initWithText:withBoundKey:withSwitchOnValue:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withSwitchOnValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withSwitchOnValue:(NSNumber *)switchOnValue </Declaration>
            <Abstract>Returns an initialized SCSwitchCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSwitchCell/switchControlChanged</TokenIdentifier>
            <Anchor>switchControlChanged</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)switchControlChanged</Declaration>
            <Abstract>Method gets called internally whenever the value of switch control is changed. </Abstract>
        </Token>
    </File>
    <File path="Protocols/SCTableViewCellDelegate.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/intf/SCTableViewCellDelegate</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This protocol should be adopted by objects that want to mediate as a delegate for SCTableViewCell. All methods for this protocol are optional. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/willConfigureCell:</TokenIdentifier>
            <Anchor>willConfigureCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)willConfigureCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the specified cell is about to be configured in its owner UITableView. This is the perfect time to do any customization to the cell's height, editable, and movable properties.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/willDisplayCell:</TokenIdentifier>
            <Anchor>willDisplayCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)willDisplayCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the specified cell is about to be displayed. This is the perfect time to do any customization to the cell's appearance.Note: This method overrides its counterpart in SCTableViewModelDelegate. Note: To change cell properties like the height, editable, or movable states, use the willConfigureCell delegate method instead. Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/willSelectCell:</TokenIdentifier>
            <Anchor>willSelectCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)willSelectCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the specified cell will be selected.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/didSelectCell:</TokenIdentifier>
            <Anchor>didSelectCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)didSelectCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the specified cell has been selected.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/didDeselectCell:</TokenIdentifier>
            <Anchor>didDeselectCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)didDeselectCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the specified cell has been deselected.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/accessoryButtonTappedForCell:</TokenIdentifier>
            <Anchor>accessoryButtonTappedForCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)accessoryButtonTappedForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the specified cell's accessory button have been tapped.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/valueIsValidForCell:</TokenIdentifier>
            <Anchor>valueIsValidForCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (BOOL)valueIsValidForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Asks the delegate if the value is valid for the specified cell. Define this method if you want to override the cells' default value validation and provide your own custom validation.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/returnButtonTappedForCell:</TokenIdentifier>
            <Anchor>returnButtonTappedForCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)returnButtonTappedForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the return keyboard button has been tapped for the specified cell Define this method if you want to override the cells' default behaviour for tapping the return button.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/newImageNameForCell:</TokenIdentifier>
            <Anchor>newImageNameForCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (NSString *)newImageNameForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Asks the delegate for a new image name for the specified SCImagePickerCell. Define this method to provide a new name for the selected image, instead of using the auto generated one.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/detailViewWillAppearForCell:withDetailTableViewModel:</TokenIdentifier>
            <Anchor>detailViewWillAppearForCell:withDetailTableViewModel:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)detailViewWillAppearForCell:(SCTableViewCell *)cell withDetailTableViewModel:(SCTableViewModel *)detailTableViewModel </Declaration>
            <Abstract>Notifies the delegate that the cell's detail view will appear. This is the perfect time to do any customizations to the cell's detail view model.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/detailViewWillDisappearForCell:</TokenIdentifier>
            <Anchor>detailViewWillDisappearForCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)detailViewWillDisappearForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the cell's detail view will disappear.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/intfm/SCTableViewCellDelegate/detailViewDidDisappearForCell:</TokenIdentifier>
            <Anchor>detailViewDidDisappearForCell:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)detailViewDidDisappearForCell:(SCTableViewCell *)cell </Declaration>
            <Abstract>Notifies the delegate that the cell's detail view has disappeared.Note: This method overrides its counterpart in SCTableViewModelDelegate. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfItemsSection.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfItemsSection</TokenIdentifier>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Abstract>This class functions as an SCTableViewModel section that is able to represent an array of any kind of items and automatically generate its cells from these items. The section is also able to handle all end-user interaction with the generated cells, including adding, editing, deleting, and moving the cells. When cells are added or edited, detail views are automatically generated for this purpose. To enable adding cells, the class' user should set the addButtonItem property of the section to a valid UIBarButtonItem, the section then will automatically add new items when the button is tapped.When adding new items to the array, the section starts by first asking the model's data source to provide a new item using its tableViewModel:newItemForArrayOfItemsSectionAtIndex: SCTableViewModelDataSource protocol method.This class is an abstract base class. Subclasses of this class must override the buildDetailTableModel method. This method should return a model for the detail view to display.Important: This is an abstract base class, you should never make any direct instances of it.See also: SCArrayOfStringsSection, SCArrayOfObjectsSection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/items</TokenIdentifier>
            <Anchor>items</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSMutableArray *items</Declaration>
            <Abstract>The array of items that the section uses to generate its cells from.This array must be of type NSMutableArray, as it must support the section's add, delete, and move operations. If you do not wish to allow these operations on your array, you can either pass an array using [NSMutableArray arrayWithArray:myArray], or you can disable the functionality from the user interface by setting the allowAddingItems, allowDeletingItems, allowMovingItems, and allowEditDetailView properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/itemsAccessoryType</TokenIdentifier>
            <Anchor>itemsAccessoryType</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property UITableViewCellAccessoryType itemsAccessoryType</Declaration>
            <Abstract>The accessory type of the generated cells. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/allowAddingItems</TokenIdentifier>
            <Anchor>allowAddingItems</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL allowAddingItems</Declaration>
            <Abstract>Allows/disables adding new cells/items to the items array. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/allowDeletingItems</TokenIdentifier>
            <Anchor>allowDeletingItems</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL allowDeletingItems</Declaration>
            <Abstract>Allows/disables deleting new cells/items from the items array. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/allowMovingItems</TokenIdentifier>
            <Anchor>allowMovingItems</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL allowMovingItems</Declaration>
            <Abstract>Allows/disables moving cells/items from one row to another. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/allowEditDetailView</TokenIdentifier>
            <Anchor>allowEditDetailView</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL allowEditDetailView</Declaration>
            <Abstract>Allows/disables a detail view for editing items' values. Default: TRUE.Detail views are automatically generated for editing new items. You can control wether the view appears as a modal view or gets pushed to the navigation stack using the detailViewModal property. Modal views have the added feature of giving the end user a Cancel and Done buttons. The Cancel button cancels all user's actions, while the Done button commits them. Also, if the cell's validation is enabled, the Done button will remain disabled until all cells' values are valid. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/allowRowSelection</TokenIdentifier>
            <Anchor>allowRowSelection</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL allowRowSelection</Declaration>
            <Abstract>Allows/disables row selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/detailViewModal</TokenIdentifier>
            <Anchor>detailViewModal</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL detailViewModal</Declaration>
            <Abstract>If TRUE, the detail view always appears as a modal view. If FALSE and a navigation controller exists, the detail view is pushed to the navigation controller's stack, otherwise the view appears modally. Default: FALSE.Note: This value has no effect on the detail view generated to add new items, as it always appears modally. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/detailTableViewStyle</TokenIdentifier>
            <Anchor>detailTableViewStyle</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property UITableViewStyle detailTableViewStyle</Declaration>
            <Abstract>The modal presentation style of the section's detail view.The view style of the detail view's table. Default: UITableViewStyleGrouped. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/detailViewHidesBottomBar</TokenIdentifier>
            <Anchor>detailViewHidesBottomBar</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL detailViewHidesBottomBar</Declaration>
            <Abstract>Indicates whether the bar at the bottom of the screen is hidden when the section's detail view is pushed. Default: TRUE. Note: Only applicable to cells with detail views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/addButtonItem</TokenIdentifier>
            <Anchor>addButtonItem</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property UIBarButtonItem *addButtonItem</Declaration>
            <Abstract>Set this property to a valid UIBarButtonItem. When addButtonItem is tapped and allowAddingItems is TRUE, a detail view is automatically generated for the user to enter the new items properties. If the properties are commited, a new item is added to the array </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/cellIdentifier</TokenIdentifier>
            <Anchor>cellIdentifier</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSString *cellIdentifier</Declaration>
            <Abstract>Subclasses should use this property when creating new dequeable cells </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/createCellAtIndex:</TokenIdentifier>
            <Anchor>createCellAtIndex:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (SCTableViewCell *)createCellAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Subclasses should override this method to handle the creation of section cells </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/setPropertiesForCell:withIndex:</TokenIdentifier>
            <Anchor>setPropertiesForCell:withIndex:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)setPropertiesForCell:(SCTableViewCell *)cell withIndex:(NSUInteger)index </Declaration>
            <Abstract>Subclasses should override this method to manage setting the properties cells after being dequed from the table view </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/textForCellAtIndex:</TokenIdentifier>
            <Anchor>textForCellAtIndex:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (NSString *)textForCellAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Subclasses should override this method to set the text for each generated cell </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/detailTextForCellAtIndex:</TokenIdentifier>
            <Anchor>detailTextForCellAtIndex:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (NSString *)detailTextForCellAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Subclasses should override this method to set the detail text for each generated cell </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/didSelectCellAtIndexPath:</TokenIdentifier>
            <Anchor>didSelectCellAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)didSelectCellAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Subclasses should override this method to handle when generated cells are selected </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/commitEditingStyle:forCellAtIndexPath:</TokenIdentifier>
            <Anchor>commitEditingStyle:forCellAtIndexPath:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forCellAtIndexPath:(NSIndexPath *)indexPath </Declaration>
            <Abstract>Subclasses should override this method to handle when generated cells are deleted </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/moveCellAtIndexPath:toIndexPath:</TokenIdentifier>
            <Anchor>moveCellAtIndexPath:toIndexPath:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)moveCellAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath </Declaration>
            <Abstract>Subclasses should override this method to handle when generated cells are moved </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/didTapAddButtonItem</TokenIdentifier>
            <Anchor>didTapAddButtonItem</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)didTapAddButtonItem</Declaration>
            <Abstract>Subclasses should override this method to handle when addButtonItem is tapped </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/createNewItem</TokenIdentifier>
            <Anchor>createNewItem</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (NSObject *)createNewItem</Declaration>
            <Abstract>Subclasses should override this method to handle creating a new item </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/buildDetailTableModel:forItem:</TokenIdentifier>
            <Anchor>buildDetailTableModel:forItem:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)buildDetailTableModel:(SCTableViewModel *)detailTableModel forItem:(NSObject *)item </Declaration>
            <Abstract>Subclasses must override this method to build a model for the generated detail view. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/addNewItem:</TokenIdentifier>
            <Anchor>addNewItem:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)addNewItem:(NSObject *)newItem </Declaration>
            <Abstract>Subclasses should override this method to handle adding a new item (method called internally by framework) </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/tempDetailModelModified</TokenIdentifier>
            <Anchor>tempDetailModelModified</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)tempDetailModelModified</Declaration>
            <Abstract>Method gets called internally by framework. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/commitDetailModelChanges:</TokenIdentifier>
            <Anchor>commitDetailModelChanges:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)commitDetailModelChanges:(SCTableViewModel *)detailModel </Declaration>
            <Abstract>Method gets called internally by framework. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/sectionWithHeaderTitle:withItems:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withItems:(NSMutableArray *)sectionItems </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfItemsSection given a header title and an array of items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/initWithHeaderTitle:withItems:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withItems:(NSMutableArray *)sectionItems </Declaration>
            <Abstract>Returns an initialized SCArrayOfItemsSection given a header title and an array of items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/dispatchAddNewItemEvent</TokenIdentifier>
            <Anchor>dispatchAddNewItemEvent</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)dispatchAddNewItemEvent</Declaration>
            <Abstract>User can call this method to dispatch an AddNewItem event, the same event dispached when the end-user taps addButtonItem. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/dispatchSelectRowAtIndexPathEvent:</TokenIdentifier>
            <Anchor>dispatchSelectRowAtIndexPathEvent:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)dispatchSelectRowAtIndexPathEvent:(NSIndexPath *)indexPath </Declaration>
            <Abstract>User can call this method to dispatch a SelectRow event, the same event dispached when the end-user selects a cell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfItemsSection/dispatchRemoveRowAtIndexPathEvent:</TokenIdentifier>
            <Anchor>dispatchRemoveRowAtIndexPathEvent:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (void)dispatchRemoveRowAtIndexPathEvent:(NSIndexPath *)indexPath </Declaration>
            <Abstract>User can call this method to dispatch a RemoveRow event, the same event dispached when the end-user taps the delete button on a cell. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfObjectsAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfObjectsAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeArrayOfObjects, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsAttributes/allowAddingItems</TokenIdentifier>
            <Anchor>allowAddingItems</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL allowAddingItems</Declaration>
            <Abstract>Determines if the generated control allows adding new objects. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsAttributes/allowDeletingItems</TokenIdentifier>
            <Anchor>allowDeletingItems</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL allowDeletingItems</Declaration>
            <Abstract>Determines if the generated control allows deleting objects. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsAttributes/allowMovingItems</TokenIdentifier>
            <Anchor>allowMovingItems</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL allowMovingItems</Declaration>
            <Abstract>Determines if the generated control allows moving objects. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsAttributes/allowEditingItems</TokenIdentifier>
            <Anchor>allowEditingItems</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property BOOL allowEditingItems</Declaration>
            <Abstract>Determines if the generated control allows editing objects. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsAttributes/attributesWithObjectClassDefinition:allowAddingItems:allowDeletingItems:allowMovingItems:</TokenIdentifier>
            <Anchor>attributesWithObjectClassDefinition:allowAddingItems:allowDeletingItems:allowMovingItems:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithObjectClassDefinition:(SCClassDefinition *)classDefinition allowAddingItems:(BOOL)allowAdding allowDeletingItems:(BOOL)allowDeleting allowMovingItems:(BOOL)allowMoving </Declaration>
            <Abstract>Allocates and returns an initialized SCArrayOfObjectsAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCArrayOfObjectsAttributes/initWithObjectClassDefinition:allowAddingItems:allowDeletingItems:allowMovingItems:</TokenIdentifier>
            <Anchor>initWithObjectClassDefinition:allowAddingItems:allowDeletingItems:allowMovingItems:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithObjectClassDefinition:(SCClassDefinition *)classDefinition allowAddingItems:(BOOL)allowAdding allowDeletingItems:(BOOL)allowDeleting allowMovingItems:(BOOL)allowMoving </Declaration>
            <Abstract>Returns an initialized SCArrayOfObjectsAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCDateAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCDateAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeDate, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateAttributes/dateFormatter</TokenIdentifier>
            <Anchor>dateFormatter</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSDateFormatter *dateFormatter</Declaration>
            <Abstract>The date formatter used to display the date of generated control. Set to nil to ignore. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateAttributes/attributesWithDateFormatter:</TokenIdentifier>
            <Anchor>attributesWithDateFormatter:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithDateFormatter:(NSDateFormatter *)formatter </Declaration>
            <Abstract>Allocates and returns an initialized SCDateAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDateAttributes/initWithDateFormatter:</TokenIdentifier>
            <Anchor>initWithDateFormatter:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithDateFormatter:(NSDateFormatter *)formatter </Declaration>
            <Abstract>Returns an initialized SCDateAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfStringsModel.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfStringsModel</TokenIdentifier>
            <DeclaredIn>SCTableViewModel.h</DeclaredIn>
            <Abstract>This class functions as a table view model that is able to represent an array of string items and automatically generate its cells from these items. The class inherits all its funtionality from its superclass: SCArrayOfItemsModel, except that its items array can only contain items of type NSString. SCArrayOfStringsModel will automatically generate a set of SCArrayOfStringsSection(s) if the SCTableViewModelDataSource method tableViewModel:sectionHeaderTitleForItem:AtIndex: is implemented, otherwise it will only generate a single SCArrayOfStringsSection. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCSelectionSection.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSelectionSection</TokenIdentifier>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Abstract>This class functions as an SCTableViewModel section that is able to provide selection functionality. The cells in this section represent different items that the end-user can select from, and they are generated from NSStrings in its items array. Once a cell is selected, a checkmark appears next to it, similar to Apple's Settings application where a user selects a Ringtone for their iPhone. The section can be configured to allow multiple selection and to allow no selection at all.There are three ways to set/retrieve the section's selection:Through binding an object to the section, and specifying a property name to bind the selection index result to. The bound property must be of type NSMutableSet if multiple selection is allowed, otherwise it must be of type NSNumber or NSString.Through binding a key to the section and setting/retrieving through the ownerTableViewModel modelKeyValues property.Through the selectedItemsIndexes or selectedItemIndex properties.See also: SCSelectionCell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/selectedItemIndex</TokenIdentifier>
            <Anchor>selectedItemIndex</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSNumber *selectedItemIndex</Declaration>
            <Abstract>This property reflects the current section's selection. You can set this property to define the section's selection.Note: If you have bound this section to an object or a key, you can define the section's selection using either the bound property value or the key value, respectively. Note: In case of no selection, this property will be set to an NSNumber of value -1. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/selectedItemsIndexes</TokenIdentifier>
            <Anchor>selectedItemsIndexes</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property NSMutableSet *selectedItemsIndexes</Declaration>
            <Abstract>This property reflects the current section's selection(s). You can add index(es) to the set to define the section's selection.Note: If you have bound this section to an object or a key, you can define the section's selection using either the bound property value or the key value, respectively. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/allowMultipleSelection</TokenIdentifier>
            <Anchor>allowMultipleSelection</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL allowMultipleSelection</Declaration>
            <Abstract>If TRUE, the section allows multiple selection. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/allowNoSelection</TokenIdentifier>
            <Anchor>allowNoSelection</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL allowNoSelection</Declaration>
            <Abstract>If TRUE, the section allows no selection at all. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/autoDismissViewController</TokenIdentifier>
            <Anchor>autoDismissViewController</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>@property BOOL autoDismissViewController</Declaration>
            <Abstract>If TRUE, the section allows automatically dismisses the current view controller when a value is selected. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/sectionWithHeaderTitle:withBoundObject:withSelectedIndexPropertyName:withItems:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withBoundObject:withSelectedIndexPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withSelectedIndexPropertyName:(NSString *)propertyName withItems:(NSArray *)sectionItems </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionSection given a header title, a bound object, an NSNumber bound property name, and an array of selection items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/sectionWithHeaderTitle:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withSelectedIndexesPropertyName:(NSString *)propertyName withItems:(NSArray *)sectionItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionSection given a header title, a bound object, an NSMutableSet bound property name, an array of selection items, and wether to allow multiple selection.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/sectionWithHeaderTitle:withBoundObject:withSelectionStringPropertyName:withItems:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withBoundObject:withSelectionStringPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withSelectionStringPropertyName:(NSString *)propertyName withItems:(NSArray *)sectionItems </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionSection given a header title, a bound object, an NSString bound property name, and an array of selection items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/sectionWithHeaderTitle:withBoundKey:withSelectedIndexValue:withItems:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withBoundKey:withSelectedIndexValue:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundKey:(NSString *)key withSelectedIndexValue:(NSNumber *)selectedIndexValue withItems:(NSArray *)sectionItems </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionSection given a header title, a bound key, an NSNumber bound property name, and array of selection items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/sectionWithHeaderTitle:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>sectionWithHeaderTitle:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>+ (id)sectionWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundKey:(NSString *)key withSelectedIndexesValue:(NSMutableSet *)selectedIndexesValue withItems:(NSArray *)sectionItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionSection given a header title, a bound key, an NSMutableSet bound property name, an array of selection items, and wether to allow multiple selection.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/initWithHeaderTitle:withBoundObject:withSelectedIndexPropertyName:withItems:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withBoundObject:withSelectedIndexPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withSelectedIndexPropertyName:(NSString *)propertyName withItems:(NSArray *)sectionItems </Declaration>
            <Abstract>Returns an initialized SCSelectionSection given a header title, a bound object, an NSNumber bound property name, and an array of selection items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/initWithHeaderTitle:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withBoundObject:withSelectedIndexesPropertyName:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withSelectedIndexesPropertyName:(NSString *)propertyName withItems:(NSArray *)sectionItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Returns an initialized SCSelectionSection given a header title, a bound object, a bound property name, an array of selection items, and wether to allow multiple selection.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/initWithHeaderTitle:withBoundObject:withSelectionStringPropertyName:withItems:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withBoundObject:withSelectionStringPropertyName:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundObject:(NSObject *)object withSelectionStringPropertyName:(NSString *)propertyName withItems:(NSArray *)sectionItems </Declaration>
            <Abstract>Returns an initialized SCSelectionSection given a header title, a bound object, an NSString bound property name, and an array of selection items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/initWithHeaderTitle:withBoundKey:withSelectedIndexValue:withItems:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withBoundKey:withSelectedIndexValue:withItems:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundKey:(NSString *)key withSelectedIndexValue:(NSNumber *)selectedIndexValue withItems:(NSArray *)sectionItems </Declaration>
            <Abstract>Returns an initialized SCSelectionSection given a header title, a bound key, an NSNumber bound property name, an array of selection items.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSelectionSection/initWithHeaderTitle:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</TokenIdentifier>
            <Anchor>initWithHeaderTitle:withBoundKey:withSelectedIndexesValue:withItems:allowMultipleSelection:</Anchor>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Declaration>- (id)initWithHeaderTitle:(NSString *)sectionHeaderTitle withBoundKey:(NSString *)key withSelectedIndexesValue:(NSMutableSet *)selectedIndexesValue withItems:(NSArray *)sectionItems allowMultipleSelection:(BOOL)multipleSelection </Declaration>
            <Abstract>Returns an initialized SCSelectionSection given a header title, a bound object, a bound property name, an array of selection items, and wether to allow multiple selection.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCObjectSelectionAttributes.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCObjectSelectionAttributes</TokenIdentifier>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Abstract>This class is used to extend the definition of an SCPropertyAttributes instance of type SCPropertyTypeObjectSelection, thus allowing further customization of the generated control by the user. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSelectionAttributes/itemsEntityClassDefinition</TokenIdentifier>
            <Anchor>itemsEntityClassDefinition</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property SCClassDefinition *itemsEntityClassDefinition</Declaration>
            <Abstract>The class definition of the entity whose objects are to be presented for selection. Property should be set to a valid value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSelectionAttributes/itemsTitlePropertyName</TokenIdentifier>
            <Anchor>itemsTitlePropertyName</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>@property NSString *itemsTitlePropertyName</Declaration>
            <Abstract>The property name of the entity objects, the value of which will be used as the objects' titles when they are displayed for selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSelectionAttributes/attributesWithItemsEntityClassDefinition:withItemsTitlePropertyName:allowMultipleSelection:allowNoSelection:</TokenIdentifier>
            <Anchor>attributesWithItemsEntityClassDefinition:withItemsTitlePropertyName:allowMultipleSelection:allowNoSelection:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>+ (id)attributesWithItemsEntityClassDefinition:(SCClassDefinition *)classDefinition withItemsTitlePropertyName:(NSString *)titlePropertyName allowMultipleSelection:(BOOL)allowMultipleSel allowNoSelection:(BOOL)allowNoSel </Declaration>
            <Abstract>Allocates and returns an initialized SCSelectionAttributes.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSelectionAttributes/initWithItemsEntityClassDefinition:withItemsTitlePropertyName:allowMultipleSelection:allowNoSelection:</TokenIdentifier>
            <Anchor>initWithItemsEntityClassDefinition:withItemsTitlePropertyName:allowMultipleSelection:allowNoSelection:</Anchor>
            <DeclaredIn>SCPropertyAttributes.h</DeclaredIn>
            <Declaration>- (id)initWithItemsEntityClassDefinition:(SCClassDefinition *)classDefinition withItemsTitlePropertyName:(NSString *)titlePropertyName allowMultipleSelection:(BOOL)allowMultipleSel allowNoSelection:(BOOL)allowNoSel </Declaration>
            <Abstract>Returns an initialized SCSelectionAttributes.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCArrayOfStringsSection.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCArrayOfStringsSection</TokenIdentifier>
            <DeclaredIn>SCTableViewSection.h</DeclaredIn>
            <Abstract>This class functions as an SCTableViewModel section that is able to represent an array of string items and automatically generate its cells from these items. The class inherits all its funtionality from its superclass: SCArrayOfItemsSection, except that its items array can only contain items of type NSString. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCSliderCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCSliderCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell with a UISlider control. The bound property name or bound key value of this cell must be of type NSNumber. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderCell/slider</TokenIdentifier>
            <Anchor>slider</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UISlider *slider</Declaration>
            <Abstract>The UISlider control associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderCell/cellWithText:withBoundObject:withSliderValuePropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withSliderValuePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSliderValuePropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCSliderCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderCell/cellWithText:withBoundKey:withSliderValue:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withSliderValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withSliderValue:(NSNumber *)sliderValue </Declaration>
            <Abstract>Allocates and returns an initialized SCSliderCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderCell/initWithText:withBoundObject:withSliderValuePropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withSliderValuePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSliderValuePropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCSliderCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderCell/initWithText:withBoundKey:withSliderValue:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withSliderValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withSliderValue:(NSNumber *)sliderValue </Declaration>
            <Abstract>Returns an initialized SCSliderCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCSliderCell/sliderValueChanged</TokenIdentifier>
            <Anchor>sliderValueChanged</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)sliderValueChanged</Declaration>
            <Abstract>Method gets called internally whenever the value of slider control is changed. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCDictionaryDefinition.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCDictionaryDefinition</TokenIdentifier>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Abstract>This class functions as a means to further extend the key definitions of an NSMutableDictionary. Using dictionary definitions, classes like SCObjectCell and SCObjectSection will be able to better generate user interface elements that truly represent the keys of their bound mutable dictionaries.SCDictionaryDefinition directly decends from SCClassDefinition.See also: SCPropertyDefinition. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDictionaryDefinition/definitionWithDictionaryKeyNames:</TokenIdentifier>
            <Anchor>definitionWithDictionaryKeyNames:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithDictionaryKeyNames:(NSArray *)keyNames </Declaration>
            <Abstract>Allocates and returns an initialized SCDictionaryDefinition given the key names of the mutable dictionary to be defined. By default, all property definitions generated for the given keyNames will have a type of SCPropertyTypeTextField. This can be fully customized after initialization.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDictionaryDefinition/definitionWithDictionaryKeyNames:withKeyTitles:</TokenIdentifier>
            <Anchor>definitionWithDictionaryKeyNames:withKeyTitles:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithDictionaryKeyNames:(NSArray *)keyNames withKeyTitles:(NSArray *)keyTitles </Declaration>
            <Abstract>Allocates and returns an initialized SCDictionaryDefinition given the key names and titles of the mutable dictionary to be defined. By default, all property definitions generated for the given keyNames will have a type of SCPropertyTypeTextField. This can be fully customized after initialization.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDictionaryDefinition/initWithDictionaryKeyNames:</TokenIdentifier>
            <Anchor>initWithDictionaryKeyNames:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithDictionaryKeyNames:(NSArray *)keyNames </Declaration>
            <Abstract>Returns an initialized SCDictionaryDefinition given the key names of the mutable dictionary to be defined. By default, all property definitions generated for the given keyNames will have a type of SCPropertyTypeTextField. This can be fully customized after initialization.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCDictionaryDefinition/initWithDictionaryKeyNames:withKeyTitles:</TokenIdentifier>
            <Anchor>initWithDictionaryKeyNames:withKeyTitles:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithDictionaryKeyNames:(NSArray *)keyNames withKeyTitles:(NSArray *)keyTitles </Declaration>
            <Abstract>Returns an initialized SCDictionaryDefinition given the key names and titles of the mutable dictionary to be defined. By default, all property definitions generated for the given keyNames will have a type of SCPropertyTypeTextField. This can be fully customized after initialization.</Abstract>
        </Token>
    </File>
    <File path="Classes/SCLabelCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCLabelCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell with a UILabel control. The bound property name or bound key value of this cell must be of type NSString. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCLabelCell/label</TokenIdentifier>
            <Anchor>label</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UILabel *label</Declaration>
            <Abstract>The UILabel control associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCLabelCell/cellWithText:withBoundObject:withLabelTextPropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withLabelTextPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withLabelTextPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCLabelCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCLabelCell/cellWithText:withBoundKey:withLabelTextValue:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withLabelTextValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withLabelTextValue:(NSString *)labelTextValue </Declaration>
            <Abstract>Allocates and returns an initialized SCLabelCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCLabelCell/initWithText:withBoundObject:withLabelTextPropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withLabelTextPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withLabelTextPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCLabelCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCLabelCell/initWithText:withBoundKey:withLabelTextValue:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withLabelTextValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withLabelTextValue:(NSString *)labelTextValue </Declaration>
            <Abstract>Returns an initialized SCLabelCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCClassDefinition.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCClassDefinition</TokenIdentifier>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Abstract>This class functions as a means to further extend the definition of user-defined classes. Using class definitions, classes like SCObjectCell and SCObjectSection will be able to better generate user interface elements that truly represent the properties of their bound objects.SCClassDefinition mainly consists of one or more property definitions of type SCPropertyDefinition. Upon creation, SCClassDefinition will (optionally) automatically generate all the property definitions for the given class. From there, the user will be able to customize the generated property definitions, add new definitions, or remove generated definitions.See also: SCPropertyDefinition. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/cls</TokenIdentifier>
            <Anchor>cls</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property Class cls</Declaration>
            <Abstract>The class associated with the definition. Note: Only applicable with class definition is initialized with a class. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/entity</TokenIdentifier>
            <Anchor>entity</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSEntityDescription *entity</Declaration>
            <Abstract>The entity associated with the definition. Note: Only applicable when class definition is initialized with an entity name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/managedObjectContext</TokenIdentifier>
            <Anchor>managedObjectContext</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSManagedObjectContext *managedObjectContext</Declaration>
            <Abstract>The managed object context of the entity associated with the definition. Note: Only applicable when class definition is initialized with an entity name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/className</TokenIdentifier>
            <Anchor>className</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSString *className</Declaration>
            <Abstract>The string name of cls or entity </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/keyPropertyName</TokenIdentifier>
            <Anchor>keyPropertyName</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSString *keyPropertyName</Declaration>
            <Abstract>The key of the entity associated with the definition. The key is usually used when a set of entities is sorted. By default, SCClassDefinition sets this property to the name of the first property in the entity. Note: Only applicable when class definition is initialized with an entity name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/titlePropertyName</TokenIdentifier>
            <Anchor>titlePropertyName</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSString *titlePropertyName</Declaration>
            <Abstract>The name of the title property for the class or entity. Title properties are used in user interface elements to display title information based on the value of the property named here. By default, SCClassDefinition sets this property to the name of the first property in cls or entity. Note: To have the title set to more than one property value, separate the property names by a semi-colon (e.g.: "firstName;lastName"). When displayed, the titles will be separated by the value of the titlePropertyNameDelimiter property. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/titlePropertyNameDelimiter</TokenIdentifier>
            <Anchor>titlePropertyNameDelimiter</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSString *titlePropertyNameDelimiter</Declaration>
            <Abstract>The delimiter used to separate the titles specified in titlePropertyName. Default: " ". </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/descriptionPropertyName</TokenIdentifier>
            <Anchor>descriptionPropertyName</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSString *descriptionPropertyName</Declaration>
            <Abstract>The name of the description property for the class or entity. Description properties are used in user interface elements to display description information based on the value of the property named here. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/uiElementDelegate</TokenIdentifier>
            <Anchor>uiElementDelegate</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property id uiElementDelegate</Declaration>
            <Abstract>The delegate for the user interface elements that will be generated for the property definitions. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/propertyDefinitionCount</TokenIdentifier>
            <Anchor>propertyDefinitionCount</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>@property NSUInteger propertyDefinitionCount</Declaration>
            <Abstract>The number of property definitions. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/addPropertyDefinitionWithName:title:type:</TokenIdentifier>
            <Anchor>addPropertyDefinitionWithName:title:type:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (BOOL)addPropertyDefinitionWithName:(NSString *)propertyName title:(NSString *)propertyTitle type:(SCPropertyType)propertyType </Declaration>
            <Abstract>Methods adds a new property definition. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/addPropertyDefinition:</TokenIdentifier>
            <Anchor>addPropertyDefinition:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (BOOL)addPropertyDefinition:(SCPropertyDefinition *)propertyDefinition </Declaration>
            <Abstract>Methods adds a new property definition. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/removePropertyDefinitionAtIndex:</TokenIdentifier>
            <Anchor>removePropertyDefinitionAtIndex:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (void)removePropertyDefinitionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Removes the property definition at the given index. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/removePropertyDefinitionWithName:</TokenIdentifier>
            <Anchor>removePropertyDefinitionWithName:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (void)removePropertyDefinitionWithName:(NSString *)propertyName </Declaration>
            <Abstract>Removes the property definition with the given name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/propertyDefinitionAtIndex:</TokenIdentifier>
            <Anchor>propertyDefinitionAtIndex:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (SCPropertyDefinition *)propertyDefinitionAtIndex:(NSUInteger)index </Declaration>
            <Abstract>Returns the property definition at the given index. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/propertyDefinitionWithName:</TokenIdentifier>
            <Anchor>propertyDefinitionWithName:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (SCPropertyDefinition *)propertyDefinitionWithName:(NSString *)propertyName </Declaration>
            <Abstract>Returns the property definition with the given name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/indexOfPropertyDefinitionWithName:</TokenIdentifier>
            <Anchor>indexOfPropertyDefinitionWithName:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (NSUInteger)indexOfPropertyDefinitionWithName:(NSString *)propertyName </Declaration>
            <Abstract>Returns the index for the property definition with the given name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/definitionWithClass:autoGeneratePropertyDefinitions:</TokenIdentifier>
            <Anchor>definitionWithClass:autoGeneratePropertyDefinitions:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithClass:(Class)_cls autoGeneratePropertyDefinitions:(BOOL)autoGenerate </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a class and the option to auto generate property definitions for the given class.The method will also generate user friendly property titles from the names of the generated properties. These titles can be modified by the user later as part of the property definition customization.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/definitionWithClass:withPropertyNames:</TokenIdentifier>
            <Anchor>definitionWithClass:withPropertyNames:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithClass:(Class)_cls withPropertyNames:(NSArray *)propertyNames </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a class and an array of the property names to generate property definitions from.The method will also generate user friendly property titles from the names of the given properties. These titles can be modified by the user later as part of the property definition customization.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/definitionWithClass:withPropertyNames:withPropertyTitles:</TokenIdentifier>
            <Anchor>definitionWithClass:withPropertyNames:withPropertyTitles:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithClass:(Class)_cls withPropertyNames:(NSArray *)propertyNames withPropertyTitles:(NSArray *)propertyTitles </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a class, an array of the property names to generate property definitions from, and array of titles for these properties.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/definitionWithEntityName:withManagedObjectContext:autoGeneratePropertyDefinitions:</TokenIdentifier>
            <Anchor>definitionWithEntityName:withManagedObjectContext:autoGeneratePropertyDefinitions:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithEntityName:(NSString *)entityName withManagedObjectContext:(NSManagedObjectContext *)context autoGeneratePropertyDefinitions:(BOOL)autoGenerate </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a Core Data entity name and the option to auto generate property definitions for the given entity's properties.The method will also generate user friendly property titles from the names of the generated properties. These titles can be modified by the user later as part of the property definition customization.
Note: This method is used when creating an extended class definition for Core Data's managed object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/definitionWithEntityName:withManagedObjectContext:withPropertyNames:</TokenIdentifier>
            <Anchor>definitionWithEntityName:withManagedObjectContext:withPropertyNames:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithEntityName:(NSString *)entityName withManagedObjectContext:(NSManagedObjectContext *)context withPropertyNames:(NSArray *)propertyNames </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a Core Data entity name and an array of the property names to generate property definitions for.The method will also generate user friendly property titles from the names of the given properties. These titles can be modified by the user later as part of the property definition customization.
Note: This method is used when creating an extended class definition for Core Data's managed object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/definitionWithEntityName:withManagedObjectContext:withPropertyNames:withPropertyTitles:</TokenIdentifier>
            <Anchor>definitionWithEntityName:withManagedObjectContext:withPropertyNames:withPropertyTitles:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>+ (id)definitionWithEntityName:(NSString *)entityName withManagedObjectContext:(NSManagedObjectContext *)context withPropertyNames:(NSArray *)propertyNames withPropertyTitles:(NSArray *)propertyTitles </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a Core Data entity name, an array of the property names to generate property definitions for, and array of titles for these properties.
Note: This method is used when creating an extended class definition for Core Data's managed object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/initWithClass:autoGeneratePropertyDefinitions:</TokenIdentifier>
            <Anchor>initWithClass:autoGeneratePropertyDefinitions:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithClass:(Class)_cls autoGeneratePropertyDefinitions:(BOOL)autoGenerate </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a class and the option to auto generate property definitions for the given class.The method will also generate user friendly property titles from the names of the generated properties. These titles can be modified by the user later as part of the property definition customization.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/initWithClass:withPropertyNames:</TokenIdentifier>
            <Anchor>initWithClass:withPropertyNames:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithClass:(Class)_cls withPropertyNames:(NSArray *)propertyNames </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a class and an array of the property names to generate property definitions from.The method will also generate user friendly property titles from the names of the given properties. These titles can be modified by the user later as part of the property definition customization.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/initWithClass:withPropertyNames:withPropertyTitles:</TokenIdentifier>
            <Anchor>initWithClass:withPropertyNames:withPropertyTitles:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithClass:(Class)_cls withPropertyNames:(NSArray *)propertyNames withPropertyTitles:(NSArray *)propertyTitles </Declaration>
            <Abstract>Allocates and returns an initialized SCClassDefinition given a class, an array of the property names to generate property definitions from, and array of titles for these properties.</Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/initWithEntityName:withManagedObjectContext:autoGeneratePropertyDefinitions:</TokenIdentifier>
            <Anchor>initWithEntityName:withManagedObjectContext:autoGeneratePropertyDefinitions:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithEntityName:(NSString *)entityName withManagedObjectContext:(NSManagedObjectContext *)context autoGeneratePropertyDefinitions:(BOOL)autoGenerate </Declaration>
            <Abstract>Returns an initialized SCClassDefinition given a Core Data entity name and the option to auto generate property definitions for the given entity's properties.The method will also generate user friendly property titles from the names of the generated properties. These titles can be modified by the user later as part of the property definition customization.
Note: This method is used when creating an extended class definition for Core Data's managed object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/initWithEntityName:withManagedObjectContext:withPropertyNames:</TokenIdentifier>
            <Anchor>initWithEntityName:withManagedObjectContext:withPropertyNames:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithEntityName:(NSString *)entityName withManagedObjectContext:(NSManagedObjectContext *)context withPropertyNames:(NSArray *)propertyNames </Declaration>
            <Abstract>Returns an initialized SCClassDefinition given a Core Data entity name and an array of the property names to generate property definitions for.The method will also generate user friendly property titles from the names of the given properties. These titles can be modified by the user later as part of the property definition customization.
Note: This method is used when creating an extended class definition for Core Data's managed object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/initWithEntityName:withManagedObjectContext:withPropertyNames:withPropertyTitles:</TokenIdentifier>
            <Anchor>initWithEntityName:withManagedObjectContext:withPropertyNames:withPropertyTitles:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (id)initWithEntityName:(NSString *)entityName withManagedObjectContext:(NSManagedObjectContext *)context withPropertyNames:(NSArray *)propertyNames withPropertyTitles:(NSArray *)propertyTitles </Declaration>
            <Abstract>Returns an initialized SCClassDefinition given a Core Data entity name, an array of the property names to generate property definitions for, and array of titles for these properties.
Note: This method is used when creating an extended class definition for Core Data's managed object. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/isValidPropertyName:</TokenIdentifier>
            <Anchor>isValidPropertyName:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (BOOL)isValidPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns TRUE if propertyName is valid. A propertyName is valid if it exists within the associated class or entity. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCClassDefinition/titleValueForObject:</TokenIdentifier>
            <Anchor>titleValueForObject:</Anchor>
            <DeclaredIn>SCClassDefinition.h</DeclaredIn>
            <Declaration>- (NSString *)titleValueForObject:(NSObject *)object </Declaration>
            <Abstract>Returns the title string value for the given object. The title value is determined based on the value of the titlePropertyName property. Note: object must be an instance of the same class or entity defined in the class definition. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCTableViewCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCTableViewCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell for SCTableViewSection. SCTableViewCell is extensively subclassed to create cells with special controls such as UITextField and UISlider.SCTableViewCell provides the user with the infrastructure to access the cell's value using two main methods: Bound Object and Bound Key.Bound Object method: This works by binding the cell to an object, called the bound object, and to a property of this object, called the bound property. The cell initializes its value from the value of the bound property, and when its values changes, it sets the property back automatically.Bound Key method: This works by binding the cell to a key, called the bound key. The cell initializes its value from the value associated with this key, found in ownerTableViewModel modelKeyValues dictionary. When the cell's value change, the value of the bound key set set back in the same modelKeyValues dictionary.Please note that even though a cell value is not applicable to SCTableViewCell itself, SCTableViewCell still provides the bound object / bound key functionality as a framework to all its subclasses to use. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/ownerTableViewModel</TokenIdentifier>
            <Anchor>ownerTableViewModel</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property SCTableViewModel *ownerTableViewModel</Declaration>
            <Abstract>The owner table view model of the cell.Important: This property gets set automatically by the cell's owner, you should never set this property manually </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/delegate</TokenIdentifier>
            <Anchor>delegate</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property id delegate</Declaration>
            <Abstract>The object that acts as the delegate of SCTableViewCell. The object must adopt the SCTableViewCellDelegate protocol. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/boundObject</TokenIdentifier>
            <Anchor>boundObject</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSObject *boundObject</Declaration>
            <Abstract>The cell's bound object (see class overview). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/boundPropertyName</TokenIdentifier>
            <Anchor>boundPropertyName</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *boundPropertyName</Declaration>
            <Abstract>The cell's bound property name (see class overview). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/boundKey</TokenIdentifier>
            <Anchor>boundKey</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *boundKey</Declaration>
            <Abstract>The cell's bound key (see class overview). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/height</TokenIdentifier>
            <Anchor>height</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGFloat height</Declaration>
            <Abstract>The height of the cell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/editable</TokenIdentifier>
            <Anchor>editable</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL editable</Declaration>
            <Abstract>The editable state of the cell. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/movable</TokenIdentifier>
            <Anchor>movable</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL movable</Declaration>
            <Abstract>The movable state of the cell. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/selectable</TokenIdentifier>
            <Anchor>selectable</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL selectable</Declaration>
            <Abstract>Determines if the cell can be selected. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/badgeView</TokenIdentifier>
            <Anchor>badgeView</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property SCBadgeView *badgeView</Declaration>
            <Abstract>The cell's badge view. When assigned a text value, the badgeView displays a badge similar to the badge displayed by the iPhone's mail application for its mail folders. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/detailViewTitle</TokenIdentifier>
            <Anchor>detailViewTitle</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *detailViewTitle</Declaration>
            <Abstract>The title of the cell's detail view. If not set, the detail view's title defaults to the cell's textLabel. Note: Only applicable to cells with detail views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/detailTableViewStyle</TokenIdentifier>
            <Anchor>detailTableViewStyle</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UITableViewStyle detailTableViewStyle</Declaration>
            <Abstract>The modal presentation style of the cell's detail view. Note: Only applicable to cells with detail views.The style of the cell's detail table view. Default: Depends on subclassed cell. Note: Only applicable to cells with detail table views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/detailCellsImageViews</TokenIdentifier>
            <Anchor>detailCellsImageViews</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSArray *detailCellsImageViews</Declaration>
            <Abstract>Set this property to an array of UIImageView objects to be set to each of the cell's detail cells. Note: Only applicable to cells with detail views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/detailViewHidesBottomBar</TokenIdentifier>
            <Anchor>detailViewHidesBottomBar</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL detailViewHidesBottomBar</Declaration>
            <Abstract>Indicates whether the bar at the bottom of the screen is hidden when the cell's detail view is pushed. Default: TRUE. Note: Only applicable to cells with detail views. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/autoResignFirstResponder</TokenIdentifier>
            <Anchor>autoResignFirstResponder</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL autoResignFirstResponder</Declaration>
            <Abstract>If property is TRUE, the cell automatically dismisses the keyboard (if applicable) when another cell is selected or when the value of another cell is changed. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/cellEditingStyle</TokenIdentifier>
            <Anchor>cellEditingStyle</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UITableViewCellEditingStyle cellEditingStyle</Declaration>
            <Abstract>The cell's editing style. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/valueRequired</TokenIdentifier>
            <Anchor>valueRequired</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL valueRequired</Declaration>
            <Abstract>Determines if the cell's value is required. If TRUE, valueIsValid will only return true if the cells value is not empty. Default: FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/autoValidateValue</TokenIdentifier>
            <Anchor>autoValidateValue</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL autoValidateValue</Declaration>
            <Abstract>Determines whether to automatically validate the cell's value. Where applicable, each subclass provides its own rules for validating the cell's value. If the user chooses to provide custom validation using either the cell's SCTableViewCellDelegate, or the model's SCTableViewModelDelegate, they should set this property to FALSE. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/valueIsValid</TokenIdentifier>
            <Anchor>valueIsValid</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL valueIsValid</Declaration>
            <Abstract>This property is TRUE if the cell's value is valid. The validity of the cell's value depend on the valueRequired and the validateValue properties. If valueRequired is TRUE, valueIsValid is TRUE only if the cell contains a value. If validateValue is TRUE, valueIsValid depends on each subclass to provide validation of the cell's value. For validation, the user can also provide custom validation using either the cell's SCTableViewCellDelegate, or the model's SCTableViewModelDelegate. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/commitChangesLive</TokenIdentifier>
            <Anchor>commitChangesLive</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL commitChangesLive</Declaration>
            <Abstract>Set this property to TRUE for the cell to commit its value as soon as it is changed. If this value is FALSE, the user must explicitly call commitChanges for the cell to commit its value changes. Default: TRUE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/needsCommit</TokenIdentifier>
            <Anchor>needsCommit</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property BOOL needsCommit</Declaration>
            <Abstract>This propery is TRUE if the cell value has changed and needs to be committed. If commitChangesLive is TRUE, this property always remains FALSE. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/commitChanges</TokenIdentifier>
            <Anchor>commitChanges</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)commitChanges</Declaration>
            <Abstract>Commits any changes to the cell's value either to the bound object or the bound key where applicable (see class overview). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/reloadBoundValue</TokenIdentifier>
            <Anchor>reloadBoundValue</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)reloadBoundValue</Declaration>
            <Abstract>Reload's the cell's bound value in case the associated bound object or key's value has changed by means other than the cell itself (e.g. external custom code). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/boundValue</TokenIdentifier>
            <Anchor>boundValue</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSObject *boundValue</Declaration>
            <Abstract>This property represents the bound value of the cell. If the cell is bound to an object, then the property represents the value of the bound property. If the cell is bound to a key, then the property represents the corresponding value for the bound key in the ownerTableViewModel modelKeyValues dictionary. If the cell isn't bound to an object or a key, the the property represents the initialValue internal variable. This property is made available to sheild subclasses from all the details of dealing with the bound object or the bound key directly. Subclasses should just set boundValue to their value and SCTableViewCell will take care of the rest. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/tempDetailModel</TokenIdentifier>
            <Anchor>tempDetailModel</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property SCTableViewModel *tempDetailModel</Declaration>
            <Abstract>Property used internally by framework to manage custom detail models. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/cellValueChanged</TokenIdentifier>
            <Anchor>cellValueChanged</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)cellValueChanged</Declaration>
            <Abstract>Method gets called internally whenever the cell value changes. This method should only be used when subclassing SCTableViewCell. If what you want is to get notified when a cell value changes, consider using either SCTableViewCellDelegate or SCTableViewModelDelegate methods. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/tempDetailModelModified</TokenIdentifier>
            <Anchor>tempDetailModelModified</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)tempDetailModelModified</Declaration>
            <Abstract>Method gets called internally by framework. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/commitDetailModelChanges:</TokenIdentifier>
            <Anchor>commitDetailModelChanges:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)commitDetailModelChanges:(SCTableViewModel *)detailModel </Declaration>
            <Abstract>Method gets called internally by framework. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/willDisplay</TokenIdentifier>
            <Anchor>willDisplay</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)willDisplay</Declaration>
            <Abstract>Method gets called internally whenever the cell is about to be displayed. This method should only be used when subclassing SCTableViewCell. If what you want is to get notified when a cell is about to be displayed, consider using either SCTableViewCellDelegate or SCTableViewModelDelegate methods. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/didSelectCell</TokenIdentifier>
            <Anchor>didSelectCell</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)didSelectCell</Declaration>
            <Abstract>Method gets called internally whenever the cell gets selected. This method should only be used when subclassing SCTableViewCell. If what you want is to get notified when a cell gets selected, consider using either SCTableViewCellDelegate or SCTableViewModelDelegate methods. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/willDeselectCell</TokenIdentifier>
            <Anchor>willDeselectCell</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)willDeselectCell</Declaration>
            <Abstract>Method gets called internally whenever the cell gets deselected. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/setAttributesTo:</TokenIdentifier>
            <Anchor>setAttributesTo:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)setAttributesTo:(SCPropertyAttributes *)attributes </Declaration>
            <Abstract>Method should be overridden by subclasses to support property attributes. The method should be able to set the subclass' specific attributes to its corresponding SCPropertyAttributes subclass. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/getValueIsValid</TokenIdentifier>
            <Anchor>getValueIsValid</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (BOOL)getValueIsValid</Declaration>
            <Abstract>Method should be overridden by subclasses to provide subclass specific validation of the cell's value. If what you want is to be able to provide custom cell value validation, consider using either SCTableViewCellDelegate or SCTableViewModelDelegate methods. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/cell</TokenIdentifier>
            <Anchor>cell</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cell</Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewCell. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/cellWithText:</TokenIdentifier>
            <Anchor>cellWithText:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText </Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewCell given cell text. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/cellWithText:withBoundObject:withPropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/cellWithText:withBoundKey:withValue:</TokenIdentifier>
            <Anchor>cellWithText:withBoundKey:withValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundKey:(NSString *)key withValue:(NSObject *)keyValue </Declaration>
            <Abstract>Allocates and returns an initialized SCTableViewCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/initWithText:</TokenIdentifier>
            <Anchor>initWithText:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText </Declaration>
            <Abstract>Returns an initialized SCTableViewCell given cell text. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/initWithText:withBoundObject:withPropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withPropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withPropertyName:(NSString *)propertyName </Declaration>
            <Abstract>Returns an initialized SCTableViewCell given cell text, bound object, and a bound property name. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCTableViewCell/initWithText:withBoundKey:withValue:</TokenIdentifier>
            <Anchor>initWithText:withBoundKey:withValue:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundKey:(NSString *)key withValue:(NSObject *)keyValue </Declaration>
            <Abstract>Returns an initialized SCTableViewCell given cell text, bound key, and an initial key value. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCObjectSelectionCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCObjectSelectionCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as a cell that provides the end-user with an automatically generated detail view of objects to choose from. The selection items are provided in the form of an array of NSObjects, called the items array. SCSelection cell can be configured to allow multiple selection and to allow no selection at all. If allow multiple selection is disabled, then the bound property name of this cell must be of type NSObject, otherwise it must be of type NSMutableSet. Note: This class is usually used to represent a selection relationship between a Core Data object and other object(s). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSelectionCell/titlePropertyName</TokenIdentifier>
            <Anchor>titlePropertyName</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property NSString *titlePropertyName</Declaration>
            <Abstract>The property name of the objects in cellItems, the value of which will be used as the objects' titles when they are displayed for selection. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSelectionCell/cellWithText:withBoundObject:withSelectedObjectPropertyName:withItems:withItemTitlePropertyName:</TokenIdentifier>
            <Anchor>cellWithText:withBoundObject:withSelectedObjectPropertyName:withItems:withItemTitlePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>+ (id)cellWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedObjectPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems withItemTitlePropertyName:(NSString *)itemTitlePropertyName </Declaration>
            <Abstract>Allocates and returns an initialized SCObjectSelectionCell given cell text, bound object, a bound property name, and an array of selection items. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCObjectSelectionCell/initWithText:withBoundObject:withSelectedObjectPropertyName:withItems:withItemTitlePropertyName:</TokenIdentifier>
            <Anchor>initWithText:withBoundObject:withSelectedObjectPropertyName:withItems:withItemTitlePropertyName:</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (id)initWithText:(NSString *)cellText withBoundObject:(NSObject *)object withSelectedObjectPropertyName:(NSString *)propertyName withItems:(NSArray *)cellItems withItemTitlePropertyName:(NSString *)itemTitlePropertyName </Declaration>
            <Abstract>Returns an initialized SCObjectSelectionCell given cell text, bound object, a bound property name, and an array of selection items. </Abstract>
        </Token>
    </File>
    <File path="Classes/SCControlCell.html">
        <Token>
            <TokenIdentifier>//apple_ref/occ/cl/SCControlCell</TokenIdentifier>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Abstract>This class functions as an abstract base class for all cells that require user controls to be present inside their content view.Note: This is an abstract base class, you should never make any direct instances of it. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCControlCell/control</TokenIdentifier>
            <Anchor>control</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property UIView *control</Declaration>
            <Abstract>The control associated with the cell. Even though this property is readonly, feel free to customize any of the control's properties.Note: The type of the control has been choosen to be of type UIView instead of UIControl as not all user controls decend from UIControl (e.g. UITextView). </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCControlCell/maxTextLabelWidth</TokenIdentifier>
            <Anchor>maxTextLabelWidth</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGFloat maxTextLabelWidth</Declaration>
            <Abstract>The maximum with of the cell's textLabel </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCControlCell/controlIndentation</TokenIdentifier>
            <Anchor>controlIndentation</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGFloat controlIndentation</Declaration>
            <Abstract>The indentation of the control from the cell's left border. This indentation keeps the control at a specific distance from the cell's border unless the textLabel's text exceeds this distance, in which case the control is moved accordingly to the right. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCControlCell/controlMargin</TokenIdentifier>
            <Anchor>controlMargin</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>@property CGFloat controlMargin</Declaration>
            <Abstract>The margin between the control and the cell's textLabel. </Abstract>
        </Token>
        <Token>
            <TokenIdentifier>//apple_ref/occ/instm/SCControlCell/loadBoundValueIntoControl</TokenIdentifier>
            <Anchor>loadBoundValueIntoControl</Anchor>
            <DeclaredIn>SCTableViewCell.h</DeclaredIn>
            <Declaration>- (void)loadBoundValueIntoControl</Declaration>
            <Abstract>Method should be overridden by subclasses to load the cell's bound value into their controls </Abstract>
        </Token>
    </File>
</Tokens>